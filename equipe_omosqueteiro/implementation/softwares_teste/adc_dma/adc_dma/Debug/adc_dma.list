
adc_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003600  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800370c  0800370c  0001370c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003770  08003770  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003770  08003770  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003770  08003770  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003770  08003770  00013770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003774  08003774  00013774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000068  080037e0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  080037e0  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008d7c  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c1a  00000000  00000000  00028e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000888  00000000  00000000  0002aa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000067c  00000000  00000000  0002b2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000183bf  00000000  00000000  0002b974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ad0b  00000000  00000000  00043d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088d30  00000000  00000000  0004ea3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002934  00000000  00000000  000d7770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000da0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080036f4 	.word	0x080036f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080036f4 	.word	0x080036f4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fbba 	bl	80008c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f840 	bl	80001d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f95a 	bl	8000410 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f93a 	bl	80003d4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000160:	f000 f896 	bl	8000290 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000164:	f000 f90c 	bl	8000380 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc, 5);
 8000168:	2205      	movs	r2, #5
 800016a:	4917      	ldr	r1, [pc, #92]	; (80001c8 <main+0x7c>)
 800016c:	4817      	ldr	r0, [pc, #92]	; (80001cc <main+0x80>)
 800016e:	f000 fd09 	bl	8000b84 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 8000172:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000176:	4816      	ldr	r0, [pc, #88]	; (80001d0 <main+0x84>)
 8000178:	f001 fc90 	bl	8001a9c <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800017c:	2064      	movs	r0, #100	; 0x64
 800017e:	f000 fc05 	bl	800098c <HAL_Delay>
	  printf("%u ", adc[0]);
 8000182:	4b11      	ldr	r3, [pc, #68]	; (80001c8 <main+0x7c>)
 8000184:	881b      	ldrh	r3, [r3, #0]
 8000186:	4619      	mov	r1, r3
 8000188:	4812      	ldr	r0, [pc, #72]	; (80001d4 <main+0x88>)
 800018a:	f002 fbf9 	bl	8002980 <iprintf>
	  printf("%u ", adc[1]);
 800018e:	4b0e      	ldr	r3, [pc, #56]	; (80001c8 <main+0x7c>)
 8000190:	885b      	ldrh	r3, [r3, #2]
 8000192:	4619      	mov	r1, r3
 8000194:	480f      	ldr	r0, [pc, #60]	; (80001d4 <main+0x88>)
 8000196:	f002 fbf3 	bl	8002980 <iprintf>
	  printf("%u ", adc[2]);
 800019a:	4b0b      	ldr	r3, [pc, #44]	; (80001c8 <main+0x7c>)
 800019c:	889b      	ldrh	r3, [r3, #4]
 800019e:	4619      	mov	r1, r3
 80001a0:	480c      	ldr	r0, [pc, #48]	; (80001d4 <main+0x88>)
 80001a2:	f002 fbed 	bl	8002980 <iprintf>
	  printf("%u ", adc[3]);
 80001a6:	4b08      	ldr	r3, [pc, #32]	; (80001c8 <main+0x7c>)
 80001a8:	88db      	ldrh	r3, [r3, #6]
 80001aa:	4619      	mov	r1, r3
 80001ac:	4809      	ldr	r0, [pc, #36]	; (80001d4 <main+0x88>)
 80001ae:	f002 fbe7 	bl	8002980 <iprintf>
	  printf("%u ", adc[4]);
 80001b2:	4b05      	ldr	r3, [pc, #20]	; (80001c8 <main+0x7c>)
 80001b4:	891b      	ldrh	r3, [r3, #8]
 80001b6:	4619      	mov	r1, r3
 80001b8:	4806      	ldr	r0, [pc, #24]	; (80001d4 <main+0x88>)
 80001ba:	f002 fbe1 	bl	8002980 <iprintf>
	  printf("\n");
 80001be:	200a      	movs	r0, #10
 80001c0:	f002 fbf0 	bl	80029a4 <putchar>
	  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 80001c4:	e7d5      	b.n	8000172 <main+0x26>
 80001c6:	bf00      	nop
 80001c8:	20000140 	.word	0x20000140
 80001cc:	20000084 	.word	0x20000084
 80001d0:	40011000 	.word	0x40011000
 80001d4:	0800370c 	.word	0x0800370c

080001d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b094      	sub	sp, #80	; 0x50
 80001dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001e2:	2228      	movs	r2, #40	; 0x28
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f002 fc27 	bl	8002a3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ec:	f107 0314 	add.w	r3, r7, #20
 80001f0:	2200      	movs	r2, #0
 80001f2:	601a      	str	r2, [r3, #0]
 80001f4:	605a      	str	r2, [r3, #4]
 80001f6:	609a      	str	r2, [r3, #8]
 80001f8:	60da      	str	r2, [r3, #12]
 80001fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
 8000206:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000208:	2301      	movs	r3, #1
 800020a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800020c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000210:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000216:	2301      	movs	r3, #1
 8000218:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800021a:	2302      	movs	r3, #2
 800021c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800021e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000222:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000224:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000228:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800022e:	4618      	mov	r0, r3
 8000230:	f001 fc4e 	bl	8001ad0 <HAL_RCC_OscConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800023a:	f000 f953 	bl	80004e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023e:	230f      	movs	r3, #15
 8000240:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000242:	2302      	movs	r3, #2
 8000244:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800024a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800024e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000254:	f107 0314 	add.w	r3, r7, #20
 8000258:	2102      	movs	r1, #2
 800025a:	4618      	mov	r0, r3
 800025c:	f001 feba 	bl	8001fd4 <HAL_RCC_ClockConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000266:	f000 f93d 	bl	80004e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800026a:	2302      	movs	r3, #2
 800026c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800026e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000272:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	4618      	mov	r0, r3
 8000278:	f002 f83a 	bl	80022f0 <HAL_RCCEx_PeriphCLKConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000282:	f000 f92f 	bl	80004e4 <Error_Handler>
  }
}
 8000286:	bf00      	nop
 8000288:	3750      	adds	r7, #80	; 0x50
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	605a      	str	r2, [r3, #4]
 800029e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002a0:	4b35      	ldr	r3, [pc, #212]	; (8000378 <MX_ADC1_Init+0xe8>)
 80002a2:	4a36      	ldr	r2, [pc, #216]	; (800037c <MX_ADC1_Init+0xec>)
 80002a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002a6:	4b34      	ldr	r3, [pc, #208]	; (8000378 <MX_ADC1_Init+0xe8>)
 80002a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002ae:	4b32      	ldr	r3, [pc, #200]	; (8000378 <MX_ADC1_Init+0xe8>)
 80002b0:	2201      	movs	r2, #1
 80002b2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002b4:	4b30      	ldr	r3, [pc, #192]	; (8000378 <MX_ADC1_Init+0xe8>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002ba:	4b2f      	ldr	r3, [pc, #188]	; (8000378 <MX_ADC1_Init+0xe8>)
 80002bc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002c2:	4b2d      	ldr	r3, [pc, #180]	; (8000378 <MX_ADC1_Init+0xe8>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 80002c8:	4b2b      	ldr	r3, [pc, #172]	; (8000378 <MX_ADC1_Init+0xe8>)
 80002ca:	2205      	movs	r2, #5
 80002cc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002ce:	482a      	ldr	r0, [pc, #168]	; (8000378 <MX_ADC1_Init+0xe8>)
 80002d0:	f000 fb80 	bl	80009d4 <HAL_ADC_Init>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80002da:	f000 f903 	bl	80004e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80002de:	2305      	movs	r3, #5
 80002e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002e2:	2301      	movs	r3, #1
 80002e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80002e6:	2306      	movs	r3, #6
 80002e8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4619      	mov	r1, r3
 80002ee:	4822      	ldr	r0, [pc, #136]	; (8000378 <MX_ADC1_Init+0xe8>)
 80002f0:	f000 fd42 	bl	8000d78 <HAL_ADC_ConfigChannel>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80002fa:	f000 f8f3 	bl	80004e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80002fe:	2306      	movs	r3, #6
 8000300:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000302:	2302      	movs	r3, #2
 8000304:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	4619      	mov	r1, r3
 800030a:	481b      	ldr	r0, [pc, #108]	; (8000378 <MX_ADC1_Init+0xe8>)
 800030c:	f000 fd34 	bl	8000d78 <HAL_ADC_ConfigChannel>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000316:	f000 f8e5 	bl	80004e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800031a:	2307      	movs	r3, #7
 800031c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800031e:	2303      	movs	r3, #3
 8000320:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	4619      	mov	r1, r3
 8000326:	4814      	ldr	r0, [pc, #80]	; (8000378 <MX_ADC1_Init+0xe8>)
 8000328:	f000 fd26 	bl	8000d78 <HAL_ADC_ConfigChannel>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000332:	f000 f8d7 	bl	80004e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000336:	2308      	movs	r3, #8
 8000338:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800033a:	2304      	movs	r3, #4
 800033c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	4619      	mov	r1, r3
 8000342:	480d      	ldr	r0, [pc, #52]	; (8000378 <MX_ADC1_Init+0xe8>)
 8000344:	f000 fd18 	bl	8000d78 <HAL_ADC_ConfigChannel>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800034e:	f000 f8c9 	bl	80004e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000352:	2309      	movs	r3, #9
 8000354:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000356:	2305      	movs	r3, #5
 8000358:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	4619      	mov	r1, r3
 800035e:	4806      	ldr	r0, [pc, #24]	; (8000378 <MX_ADC1_Init+0xe8>)
 8000360:	f000 fd0a 	bl	8000d78 <HAL_ADC_ConfigChannel>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800036a:	f000 f8bb 	bl	80004e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800036e:	bf00      	nop
 8000370:	3710      	adds	r7, #16
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20000084 	.word	0x20000084
 800037c:	40012400 	.word	0x40012400

08000380 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000384:	4b11      	ldr	r3, [pc, #68]	; (80003cc <MX_USART3_UART_Init+0x4c>)
 8000386:	4a12      	ldr	r2, [pc, #72]	; (80003d0 <MX_USART3_UART_Init+0x50>)
 8000388:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800038a:	4b10      	ldr	r3, [pc, #64]	; (80003cc <MX_USART3_UART_Init+0x4c>)
 800038c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000390:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <MX_USART3_UART_Init+0x4c>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <MX_USART3_UART_Init+0x4c>)
 800039a:	2200      	movs	r2, #0
 800039c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <MX_USART3_UART_Init+0x4c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80003a4:	4b09      	ldr	r3, [pc, #36]	; (80003cc <MX_USART3_UART_Init+0x4c>)
 80003a6:	220c      	movs	r2, #12
 80003a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003aa:	4b08      	ldr	r3, [pc, #32]	; (80003cc <MX_USART3_UART_Init+0x4c>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <MX_USART3_UART_Init+0x4c>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80003b6:	4805      	ldr	r0, [pc, #20]	; (80003cc <MX_USART3_UART_Init+0x4c>)
 80003b8:	f002 f850 	bl	800245c <HAL_UART_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80003c2:	f000 f88f 	bl	80004e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	200000f8 	.word	0x200000f8
 80003d0:	40004800 	.word	0x40004800

080003d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003da:	4b0c      	ldr	r3, [pc, #48]	; (800040c <MX_DMA_Init+0x38>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	4a0b      	ldr	r2, [pc, #44]	; (800040c <MX_DMA_Init+0x38>)
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	6153      	str	r3, [r2, #20]
 80003e6:	4b09      	ldr	r3, [pc, #36]	; (800040c <MX_DMA_Init+0x38>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	f003 0301 	and.w	r3, r3, #1
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2100      	movs	r1, #0
 80003f6:	200b      	movs	r0, #11
 80003f8:	f000 ff8f 	bl	800131a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003fc:	200b      	movs	r0, #11
 80003fe:	f000 ffa8 	bl	8001352 <HAL_NVIC_EnableIRQ>

}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40021000 	.word	0x40021000

08000410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b088      	sub	sp, #32
 8000414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
 8000422:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000424:	4b24      	ldr	r3, [pc, #144]	; (80004b8 <MX_GPIO_Init+0xa8>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a23      	ldr	r2, [pc, #140]	; (80004b8 <MX_GPIO_Init+0xa8>)
 800042a:	f043 0310 	orr.w	r3, r3, #16
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b21      	ldr	r3, [pc, #132]	; (80004b8 <MX_GPIO_Init+0xa8>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0310 	and.w	r3, r3, #16
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800043c:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <MX_GPIO_Init+0xa8>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a1d      	ldr	r2, [pc, #116]	; (80004b8 <MX_GPIO_Init+0xa8>)
 8000442:	f043 0320 	orr.w	r3, r3, #32
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <MX_GPIO_Init+0xa8>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0320 	and.w	r3, r3, #32
 8000450:	60bb      	str	r3, [r7, #8]
 8000452:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000454:	4b18      	ldr	r3, [pc, #96]	; (80004b8 <MX_GPIO_Init+0xa8>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a17      	ldr	r2, [pc, #92]	; (80004b8 <MX_GPIO_Init+0xa8>)
 800045a:	f043 0304 	orr.w	r3, r3, #4
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <MX_GPIO_Init+0xa8>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0304 	and.w	r3, r3, #4
 8000468:	607b      	str	r3, [r7, #4]
 800046a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046c:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <MX_GPIO_Init+0xa8>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a11      	ldr	r2, [pc, #68]	; (80004b8 <MX_GPIO_Init+0xa8>)
 8000472:	f043 0308 	orr.w	r3, r3, #8
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <MX_GPIO_Init+0xa8>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0308 	and.w	r3, r3, #8
 8000480:	603b      	str	r3, [r7, #0]
 8000482:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800048a:	480c      	ldr	r0, [pc, #48]	; (80004bc <MX_GPIO_Init+0xac>)
 800048c:	f001 faee 	bl	8001a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 8000490:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000496:	2301      	movs	r3, #1
 8000498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	2300      	movs	r3, #0
 800049c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	2302      	movs	r3, #2
 80004a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80004a2:	f107 0310 	add.w	r3, r7, #16
 80004a6:	4619      	mov	r1, r3
 80004a8:	4804      	ldr	r0, [pc, #16]	; (80004bc <MX_GPIO_Init+0xac>)
 80004aa:	f001 f95b 	bl	8001764 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004ae:	bf00      	nop
 80004b0:	3720      	adds	r7, #32
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40011000 	.word	0x40011000

080004c0 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80004c8:	1d39      	adds	r1, r7, #4
 80004ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004ce:	2201      	movs	r2, #1
 80004d0:	4803      	ldr	r0, [pc, #12]	; (80004e0 <__io_putchar+0x20>)
 80004d2:	f002 f813 	bl	80024fc <HAL_UART_Transmit>

  return ch;
 80004d6:	687b      	ldr	r3, [r7, #4]
}
 80004d8:	4618      	mov	r0, r3
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	200000f8 	.word	0x200000f8

080004e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e8:	b672      	cpsid	i
}
 80004ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ec:	e7fe      	b.n	80004ec <Error_Handler+0x8>
	...

080004f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004f6:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <HAL_MspInit+0x40>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <HAL_MspInit+0x40>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	6193      	str	r3, [r2, #24]
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <HAL_MspInit+0x40>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050e:	4b08      	ldr	r3, [pc, #32]	; (8000530 <HAL_MspInit+0x40>)
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	4a07      	ldr	r2, [pc, #28]	; (8000530 <HAL_MspInit+0x40>)
 8000514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000518:	61d3      	str	r3, [r2, #28]
 800051a:	4b05      	ldr	r3, [pc, #20]	; (8000530 <HAL_MspInit+0x40>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000522:	603b      	str	r3, [r7, #0]
 8000524:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	40021000 	.word	0x40021000

08000534 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b08a      	sub	sp, #40	; 0x28
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053c:	f107 0318 	add.w	r3, r7, #24
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a33      	ldr	r2, [pc, #204]	; (800061c <HAL_ADC_MspInit+0xe8>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d15f      	bne.n	8000614 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000554:	4b32      	ldr	r3, [pc, #200]	; (8000620 <HAL_ADC_MspInit+0xec>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a31      	ldr	r2, [pc, #196]	; (8000620 <HAL_ADC_MspInit+0xec>)
 800055a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b2f      	ldr	r3, [pc, #188]	; (8000620 <HAL_ADC_MspInit+0xec>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000568:	617b      	str	r3, [r7, #20]
 800056a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800056c:	4b2c      	ldr	r3, [pc, #176]	; (8000620 <HAL_ADC_MspInit+0xec>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a2b      	ldr	r2, [pc, #172]	; (8000620 <HAL_ADC_MspInit+0xec>)
 8000572:	f043 0304 	orr.w	r3, r3, #4
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b29      	ldr	r3, [pc, #164]	; (8000620 <HAL_ADC_MspInit+0xec>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f003 0304 	and.w	r3, r3, #4
 8000580:	613b      	str	r3, [r7, #16]
 8000582:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000584:	4b26      	ldr	r3, [pc, #152]	; (8000620 <HAL_ADC_MspInit+0xec>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a25      	ldr	r2, [pc, #148]	; (8000620 <HAL_ADC_MspInit+0xec>)
 800058a:	f043 0308 	orr.w	r3, r3, #8
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b23      	ldr	r3, [pc, #140]	; (8000620 <HAL_ADC_MspInit+0xec>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0308 	and.w	r3, r3, #8
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = temp_controlador_Pin|tem_bat_Pin|volt_Pin;
 800059c:	23e0      	movs	r3, #224	; 0xe0
 800059e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005a0:	2303      	movs	r3, #3
 80005a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a4:	f107 0318 	add.w	r3, r7, #24
 80005a8:	4619      	mov	r1, r3
 80005aa:	481e      	ldr	r0, [pc, #120]	; (8000624 <HAL_ADC_MspInit+0xf0>)
 80005ac:	f001 f8da 	bl	8001764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = amp_Pin|th_Pin;
 80005b0:	2303      	movs	r3, #3
 80005b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b4:	2303      	movs	r3, #3
 80005b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b8:	f107 0318 	add.w	r3, r7, #24
 80005bc:	4619      	mov	r1, r3
 80005be:	481a      	ldr	r0, [pc, #104]	; (8000628 <HAL_ADC_MspInit+0xf4>)
 80005c0:	f001 f8d0 	bl	8001764 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <HAL_ADC_MspInit+0xf8>)
 80005c6:	4a1a      	ldr	r2, [pc, #104]	; (8000630 <HAL_ADC_MspInit+0xfc>)
 80005c8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005ca:	4b18      	ldr	r3, [pc, #96]	; (800062c <HAL_ADC_MspInit+0xf8>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005d0:	4b16      	ldr	r3, [pc, #88]	; (800062c <HAL_ADC_MspInit+0xf8>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <HAL_ADC_MspInit+0xf8>)
 80005d8:	2280      	movs	r2, #128	; 0x80
 80005da:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <HAL_ADC_MspInit+0xf8>)
 80005de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005e2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <HAL_ADC_MspInit+0xf8>)
 80005e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005ea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <HAL_ADC_MspInit+0xf8>)
 80005ee:	2220      	movs	r2, #32
 80005f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <HAL_ADC_MspInit+0xf8>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005f8:	480c      	ldr	r0, [pc, #48]	; (800062c <HAL_ADC_MspInit+0xf8>)
 80005fa:	f000 fec5 	bl	8001388 <HAL_DMA_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000604:	f7ff ff6e 	bl	80004e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a08      	ldr	r2, [pc, #32]	; (800062c <HAL_ADC_MspInit+0xf8>)
 800060c:	621a      	str	r2, [r3, #32]
 800060e:	4a07      	ldr	r2, [pc, #28]	; (800062c <HAL_ADC_MspInit+0xf8>)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000614:	bf00      	nop
 8000616:	3728      	adds	r7, #40	; 0x28
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40012400 	.word	0x40012400
 8000620:	40021000 	.word	0x40021000
 8000624:	40010800 	.word	0x40010800
 8000628:	40010c00 	.word	0x40010c00
 800062c:	200000b4 	.word	0x200000b4
 8000630:	40020008 	.word	0x40020008

08000634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a1c      	ldr	r2, [pc, #112]	; (80006c0 <HAL_UART_MspInit+0x8c>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d131      	bne.n	80006b8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <HAL_UART_MspInit+0x90>)
 8000656:	69db      	ldr	r3, [r3, #28]
 8000658:	4a1a      	ldr	r2, [pc, #104]	; (80006c4 <HAL_UART_MspInit+0x90>)
 800065a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800065e:	61d3      	str	r3, [r2, #28]
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <HAL_UART_MspInit+0x90>)
 8000662:	69db      	ldr	r3, [r3, #28]
 8000664:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <HAL_UART_MspInit+0x90>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a14      	ldr	r2, [pc, #80]	; (80006c4 <HAL_UART_MspInit+0x90>)
 8000672:	f043 0308 	orr.w	r3, r3, #8
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <HAL_UART_MspInit+0x90>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f003 0308 	and.w	r3, r3, #8
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000688:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068e:	2303      	movs	r3, #3
 8000690:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000692:	f107 0310 	add.w	r3, r7, #16
 8000696:	4619      	mov	r1, r3
 8000698:	480b      	ldr	r0, [pc, #44]	; (80006c8 <HAL_UART_MspInit+0x94>)
 800069a:	f001 f863 	bl	8001764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800069e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4619      	mov	r1, r3
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <HAL_UART_MspInit+0x94>)
 80006b4:	f001 f856 	bl	8001764 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40004800 	.word	0x40004800
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40010c00 	.word	0x40010c00

080006cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <NMI_Handler+0x4>

080006d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <HardFault_Handler+0x4>

080006d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <MemManage_Handler+0x4>

080006de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <BusFault_Handler+0x4>

080006e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <UsageFault_Handler+0x4>

080006ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr

080006f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr

08000702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr

0800070e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000712:	f000 f91f 	bl	8000954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000720:	4802      	ldr	r0, [pc, #8]	; (800072c <DMA1_Channel1_IRQHandler+0x10>)
 8000722:	f000 feeb 	bl	80014fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000b4 	.word	0x200000b4

08000730 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	e00a      	b.n	8000758 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000742:	f3af 8000 	nop.w
 8000746:	4601      	mov	r1, r0
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	1c5a      	adds	r2, r3, #1
 800074c:	60ba      	str	r2, [r7, #8]
 800074e:	b2ca      	uxtb	r2, r1
 8000750:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	3301      	adds	r3, #1
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	697a      	ldr	r2, [r7, #20]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	429a      	cmp	r2, r3
 800075e:	dbf0      	blt.n	8000742 <_read+0x12>
  }

  return len;
 8000760:	687b      	ldr	r3, [r7, #4]
}
 8000762:	4618      	mov	r0, r3
 8000764:	3718      	adds	r7, #24
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b086      	sub	sp, #24
 800076e:	af00      	add	r7, sp, #0
 8000770:	60f8      	str	r0, [r7, #12]
 8000772:	60b9      	str	r1, [r7, #8]
 8000774:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	e009      	b.n	8000790 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	1c5a      	adds	r2, r3, #1
 8000780:	60ba      	str	r2, [r7, #8]
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fe9b 	bl	80004c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	3301      	adds	r3, #1
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	429a      	cmp	r2, r3
 8000796:	dbf1      	blt.n	800077c <_write+0x12>
  }
  return len;
 8000798:	687b      	ldr	r3, [r7, #4]
}
 800079a:	4618      	mov	r0, r3
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <_close>:

int _close(int file)
{
 80007a2:	b480      	push	{r7}
 80007a4:	b083      	sub	sp, #12
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr

080007b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007c8:	605a      	str	r2, [r3, #4]
  return 0;
 80007ca:	2300      	movs	r3, #0
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr

080007d6 <_isatty>:

int _isatty(int file)
{
 80007d6:	b480      	push	{r7}
 80007d8:	b083      	sub	sp, #12
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007de:	2301      	movs	r3, #1
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007ea:	b480      	push	{r7}
 80007ec:	b085      	sub	sp, #20
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	60f8      	str	r0, [r7, #12]
 80007f2:	60b9      	str	r1, [r7, #8]
 80007f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
	...

08000804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800080c:	4a14      	ldr	r2, [pc, #80]	; (8000860 <_sbrk+0x5c>)
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <_sbrk+0x60>)
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <_sbrk+0x64>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d102      	bne.n	8000826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <_sbrk+0x64>)
 8000822:	4a12      	ldr	r2, [pc, #72]	; (800086c <_sbrk+0x68>)
 8000824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <_sbrk+0x64>)
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4413      	add	r3, r2
 800082e:	693a      	ldr	r2, [r7, #16]
 8000830:	429a      	cmp	r2, r3
 8000832:	d207      	bcs.n	8000844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000834:	f002 f950 	bl	8002ad8 <__errno>
 8000838:	4603      	mov	r3, r0
 800083a:	220c      	movs	r2, #12
 800083c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800083e:	f04f 33ff 	mov.w	r3, #4294967295
 8000842:	e009      	b.n	8000858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <_sbrk+0x64>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <_sbrk+0x64>)
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	4a05      	ldr	r2, [pc, #20]	; (8000868 <_sbrk+0x64>)
 8000854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000856:	68fb      	ldr	r3, [r7, #12]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3718      	adds	r7, #24
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20005000 	.word	0x20005000
 8000864:	00000400 	.word	0x00000400
 8000868:	2000014c 	.word	0x2000014c
 800086c:	200002a0 	.word	0x200002a0

08000870 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800087c:	f7ff fff8 	bl	8000870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000880:	480b      	ldr	r0, [pc, #44]	; (80008b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000882:	490c      	ldr	r1, [pc, #48]	; (80008b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000884:	4a0c      	ldr	r2, [pc, #48]	; (80008b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000888:	e002      	b.n	8000890 <LoopCopyDataInit>

0800088a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800088c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088e:	3304      	adds	r3, #4

08000890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000894:	d3f9      	bcc.n	800088a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000896:	4a09      	ldr	r2, [pc, #36]	; (80008bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000898:	4c09      	ldr	r4, [pc, #36]	; (80008c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800089c:	e001      	b.n	80008a2 <LoopFillZerobss>

0800089e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a0:	3204      	adds	r2, #4

080008a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a4:	d3fb      	bcc.n	800089e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008a6:	f002 f91d 	bl	8002ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008aa:	f7ff fc4f 	bl	800014c <main>
  bx lr
 80008ae:	4770      	bx	lr
  ldr r0, =_sdata
 80008b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80008b8:	08003778 	.word	0x08003778
  ldr r2, =_sbss
 80008bc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80008c0:	200002a0 	.word	0x200002a0

080008c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c4:	e7fe      	b.n	80008c4 <ADC1_2_IRQHandler>
	...

080008c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <HAL_Init+0x28>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <HAL_Init+0x28>)
 80008d2:	f043 0310 	orr.w	r3, r3, #16
 80008d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d8:	2003      	movs	r0, #3
 80008da:	f000 fd13 	bl	8001304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008de:	200f      	movs	r0, #15
 80008e0:	f000 f808 	bl	80008f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e4:	f7ff fe04 	bl	80004f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40022000 	.word	0x40022000

080008f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <HAL_InitTick+0x54>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_InitTick+0x58>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4619      	mov	r1, r3
 8000906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090a:	fbb3 f3f1 	udiv	r3, r3, r1
 800090e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f000 fd2b 	bl	800136e <HAL_SYSTICK_Config>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	e00e      	b.n	8000940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b0f      	cmp	r3, #15
 8000926:	d80a      	bhi.n	800093e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000928:	2200      	movs	r2, #0
 800092a:	6879      	ldr	r1, [r7, #4]
 800092c:	f04f 30ff 	mov.w	r0, #4294967295
 8000930:	f000 fcf3 	bl	800131a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000934:	4a06      	ldr	r2, [pc, #24]	; (8000950 <HAL_InitTick+0x5c>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800093a:	2300      	movs	r3, #0
 800093c:	e000      	b.n	8000940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
}
 8000940:	4618      	mov	r0, r3
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000000 	.word	0x20000000
 800094c:	20000008 	.word	0x20000008
 8000950:	20000004 	.word	0x20000004

08000954 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <HAL_IncTick+0x1c>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <HAL_IncTick+0x20>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4413      	add	r3, r2
 8000964:	4a03      	ldr	r2, [pc, #12]	; (8000974 <HAL_IncTick+0x20>)
 8000966:	6013      	str	r3, [r2, #0]
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	20000008 	.word	0x20000008
 8000974:	20000150 	.word	0x20000150

08000978 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return uwTick;
 800097c:	4b02      	ldr	r3, [pc, #8]	; (8000988 <HAL_GetTick+0x10>)
 800097e:	681b      	ldr	r3, [r3, #0]
}
 8000980:	4618      	mov	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	20000150 	.word	0x20000150

0800098c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000994:	f7ff fff0 	bl	8000978 <HAL_GetTick>
 8000998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a4:	d005      	beq.n	80009b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <HAL_Delay+0x44>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	461a      	mov	r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4413      	add	r3, r2
 80009b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009b2:	bf00      	nop
 80009b4:	f7ff ffe0 	bl	8000978 <HAL_GetTick>
 80009b8:	4602      	mov	r2, r0
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d8f7      	bhi.n	80009b4 <HAL_Delay+0x28>
  {
  }
}
 80009c4:	bf00      	nop
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000008 	.word	0x20000008

080009d4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009dc:	2300      	movs	r3, #0
 80009de:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d101      	bne.n	80009f6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e0be      	b.n	8000b74 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d109      	bne.n	8000a18 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff fd8e 	bl	8000534 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f000 faff 	bl	800101c <ADC_ConversionStop_Disable>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a26:	f003 0310 	and.w	r3, r3, #16
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	f040 8099 	bne.w	8000b62 <HAL_ADC_Init+0x18e>
 8000a30:	7dfb      	ldrb	r3, [r7, #23]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	f040 8095 	bne.w	8000b62 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a40:	f023 0302 	bic.w	r3, r3, #2
 8000a44:	f043 0202 	orr.w	r2, r3, #2
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a54:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	7b1b      	ldrb	r3, [r3, #12]
 8000a5a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a5c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a6c:	d003      	beq.n	8000a76 <HAL_ADC_Init+0xa2>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d102      	bne.n	8000a7c <HAL_ADC_Init+0xa8>
 8000a76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a7a:	e000      	b.n	8000a7e <HAL_ADC_Init+0xaa>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	7d1b      	ldrb	r3, [r3, #20]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d119      	bne.n	8000ac0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	7b1b      	ldrb	r3, [r3, #12]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d109      	bne.n	8000aa8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	035a      	lsls	r2, r3, #13
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	e00b      	b.n	8000ac0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aac:	f043 0220 	orr.w	r2, r3, #32
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ab8:	f043 0201 	orr.w	r2, r3, #1
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	689a      	ldr	r2, [r3, #8]
 8000ada:	4b28      	ldr	r3, [pc, #160]	; (8000b7c <HAL_ADC_Init+0x1a8>)
 8000adc:	4013      	ands	r3, r2
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	6812      	ldr	r2, [r2, #0]
 8000ae2:	68b9      	ldr	r1, [r7, #8]
 8000ae4:	430b      	orrs	r3, r1
 8000ae6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000af0:	d003      	beq.n	8000afa <HAL_ADC_Init+0x126>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d104      	bne.n	8000b04 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	691b      	ldr	r3, [r3, #16]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	051b      	lsls	r3, r3, #20
 8000b02:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b0a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	430a      	orrs	r2, r1
 8000b16:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	689a      	ldr	r2, [r3, #8]
 8000b1e:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <HAL_ADC_Init+0x1ac>)
 8000b20:	4013      	ands	r3, r2
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d10b      	bne.n	8000b40 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b32:	f023 0303 	bic.w	r3, r3, #3
 8000b36:	f043 0201 	orr.w	r2, r3, #1
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b3e:	e018      	b.n	8000b72 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b44:	f023 0312 	bic.w	r3, r3, #18
 8000b48:	f043 0210 	orr.w	r2, r3, #16
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b54:	f043 0201 	orr.w	r2, r3, #1
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b60:	e007      	b.n	8000b72 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b66:	f043 0210 	orr.w	r2, r3, #16
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	ffe1f7fd 	.word	0xffe1f7fd
 8000b80:	ff1f0efe 	.word	0xff1f0efe

08000b84 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b90:	2300      	movs	r3, #0
 8000b92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a64      	ldr	r2, [pc, #400]	; (8000d2c <HAL_ADC_Start_DMA+0x1a8>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d004      	beq.n	8000ba8 <HAL_ADC_Start_DMA+0x24>
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a63      	ldr	r2, [pc, #396]	; (8000d30 <HAL_ADC_Start_DMA+0x1ac>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d106      	bne.n	8000bb6 <HAL_ADC_Start_DMA+0x32>
 8000ba8:	4b60      	ldr	r3, [pc, #384]	; (8000d2c <HAL_ADC_Start_DMA+0x1a8>)
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	f040 80b3 	bne.w	8000d1c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d101      	bne.n	8000bc4 <HAL_ADC_Start_DMA+0x40>
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	e0ae      	b.n	8000d22 <HAL_ADC_Start_DMA+0x19e>
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000bcc:	68f8      	ldr	r0, [r7, #12]
 8000bce:	f000 f9cb 	bl	8000f68 <ADC_Enable>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000bd6:	7dfb      	ldrb	r3, [r7, #23]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	f040 809a 	bne.w	8000d12 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000be6:	f023 0301 	bic.w	r3, r3, #1
 8000bea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a4e      	ldr	r2, [pc, #312]	; (8000d30 <HAL_ADC_Start_DMA+0x1ac>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d105      	bne.n	8000c08 <HAL_ADC_Start_DMA+0x84>
 8000bfc:	4b4b      	ldr	r3, [pc, #300]	; (8000d2c <HAL_ADC_Start_DMA+0x1a8>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d115      	bne.n	8000c34 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d026      	beq.n	8000c70 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c32:	e01d      	b.n	8000c70 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c38:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a39      	ldr	r2, [pc, #228]	; (8000d2c <HAL_ADC_Start_DMA+0x1a8>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d004      	beq.n	8000c54 <HAL_ADC_Start_DMA+0xd0>
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a38      	ldr	r2, [pc, #224]	; (8000d30 <HAL_ADC_Start_DMA+0x1ac>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d10d      	bne.n	8000c70 <HAL_ADC_Start_DMA+0xec>
 8000c54:	4b35      	ldr	r3, [pc, #212]	; (8000d2c <HAL_ADC_Start_DMA+0x1a8>)
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d007      	beq.n	8000c70 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d006      	beq.n	8000c8a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c80:	f023 0206 	bic.w	r2, r3, #6
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c88:	e002      	b.n	8000c90 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	6a1b      	ldr	r3, [r3, #32]
 8000c9c:	4a25      	ldr	r2, [pc, #148]	; (8000d34 <HAL_ADC_Start_DMA+0x1b0>)
 8000c9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	6a1b      	ldr	r3, [r3, #32]
 8000ca4:	4a24      	ldr	r2, [pc, #144]	; (8000d38 <HAL_ADC_Start_DMA+0x1b4>)
 8000ca6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	6a1b      	ldr	r3, [r3, #32]
 8000cac:	4a23      	ldr	r2, [pc, #140]	; (8000d3c <HAL_ADC_Start_DMA+0x1b8>)
 8000cae:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f06f 0202 	mvn.w	r2, #2
 8000cb8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cc8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	6a18      	ldr	r0, [r3, #32]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	334c      	adds	r3, #76	; 0x4c
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f000 fbaf 	bl	800143c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ce8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000cec:	d108      	bne.n	8000d00 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000cfc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000cfe:	e00f      	b.n	8000d20 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	689a      	ldr	r2, [r3, #8]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d0e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000d10:	e006      	b.n	8000d20 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	2200      	movs	r2, #0
 8000d16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000d1a:	e001      	b.n	8000d20 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40012400 	.word	0x40012400
 8000d30:	40012800 	.word	0x40012800
 8000d34:	0800109f 	.word	0x0800109f
 8000d38:	0800111b 	.word	0x0800111b
 8000d3c:	08001137 	.word	0x08001137

08000d40 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr

08000d52 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
	...

08000d78 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d101      	bne.n	8000d98 <HAL_ADC_ConfigChannel+0x20>
 8000d94:	2302      	movs	r3, #2
 8000d96:	e0dc      	b.n	8000f52 <HAL_ADC_ConfigChannel+0x1da>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	2b06      	cmp	r3, #6
 8000da6:	d81c      	bhi.n	8000de2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	4613      	mov	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	3b05      	subs	r3, #5
 8000dba:	221f      	movs	r2, #31
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	4019      	ands	r1, r3
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	6818      	ldr	r0, [r3, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	3b05      	subs	r3, #5
 8000dd4:	fa00 f203 	lsl.w	r2, r0, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	635a      	str	r2, [r3, #52]	; 0x34
 8000de0:	e03c      	b.n	8000e5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b0c      	cmp	r3, #12
 8000de8:	d81c      	bhi.n	8000e24 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	4613      	mov	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4413      	add	r3, r2
 8000dfa:	3b23      	subs	r3, #35	; 0x23
 8000dfc:	221f      	movs	r2, #31
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	4019      	ands	r1, r3
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	6818      	ldr	r0, [r3, #0]
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685a      	ldr	r2, [r3, #4]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	3b23      	subs	r3, #35	; 0x23
 8000e16:	fa00 f203 	lsl.w	r2, r0, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	631a      	str	r2, [r3, #48]	; 0x30
 8000e22:	e01b      	b.n	8000e5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	4413      	add	r3, r2
 8000e34:	3b41      	subs	r3, #65	; 0x41
 8000e36:	221f      	movs	r2, #31
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	4019      	ands	r1, r3
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	6818      	ldr	r0, [r3, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685a      	ldr	r2, [r3, #4]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	4413      	add	r3, r2
 8000e4e:	3b41      	subs	r3, #65	; 0x41
 8000e50:	fa00 f203 	lsl.w	r2, r0, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b09      	cmp	r3, #9
 8000e62:	d91c      	bls.n	8000e9e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	68d9      	ldr	r1, [r3, #12]
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	4413      	add	r3, r2
 8000e74:	3b1e      	subs	r3, #30
 8000e76:	2207      	movs	r2, #7
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	4019      	ands	r1, r3
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	6898      	ldr	r0, [r3, #8]
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	4413      	add	r3, r2
 8000e8e:	3b1e      	subs	r3, #30
 8000e90:	fa00 f203 	lsl.w	r2, r0, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	e019      	b.n	8000ed2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	6919      	ldr	r1, [r3, #16]
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4413      	add	r3, r2
 8000eae:	2207      	movs	r2, #7
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	4019      	ands	r1, r3
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	6898      	ldr	r0, [r3, #8]
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	4413      	add	r3, r2
 8000ec6:	fa00 f203 	lsl.w	r2, r0, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b10      	cmp	r3, #16
 8000ed8:	d003      	beq.n	8000ee2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ede:	2b11      	cmp	r3, #17
 8000ee0:	d132      	bne.n	8000f48 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a1d      	ldr	r2, [pc, #116]	; (8000f5c <HAL_ADC_ConfigChannel+0x1e4>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d125      	bne.n	8000f38 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d126      	bne.n	8000f48 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f08:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b10      	cmp	r3, #16
 8000f10:	d11a      	bne.n	8000f48 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a13      	ldr	r2, [pc, #76]	; (8000f64 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f18:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1c:	0c9a      	lsrs	r2, r3, #18
 8000f1e:	4613      	mov	r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f28:	e002      	b.n	8000f30 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f9      	bne.n	8000f2a <HAL_ADC_ConfigChannel+0x1b2>
 8000f36:	e007      	b.n	8000f48 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3c:	f043 0220 	orr.w	r2, r3, #32
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	40012400 	.word	0x40012400
 8000f60:	20000000 	.word	0x20000000
 8000f64:	431bde83 	.word	0x431bde83

08000f68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d040      	beq.n	8001008 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	689a      	ldr	r2, [r3, #8]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f042 0201 	orr.w	r2, r2, #1
 8000f94:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f96:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <ADC_Enable+0xac>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a1f      	ldr	r2, [pc, #124]	; (8001018 <ADC_Enable+0xb0>)
 8000f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa0:	0c9b      	lsrs	r3, r3, #18
 8000fa2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fa4:	e002      	b.n	8000fac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1f9      	bne.n	8000fa6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fb2:	f7ff fce1 	bl	8000978 <HAL_GetTick>
 8000fb6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000fb8:	e01f      	b.n	8000ffa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000fba:	f7ff fcdd 	bl	8000978 <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d918      	bls.n	8000ffa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d011      	beq.n	8000ffa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fda:	f043 0210 	orr.w	r2, r3, #16
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe6:	f043 0201 	orr.w	r2, r3, #1
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e007      	b.n	800100a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b01      	cmp	r3, #1
 8001006:	d1d8      	bne.n	8000fba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000000 	.word	0x20000000
 8001018:	431bde83 	.word	0x431bde83

0800101c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b01      	cmp	r3, #1
 8001034:	d12e      	bne.n	8001094 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0201 	bic.w	r2, r2, #1
 8001044:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001046:	f7ff fc97 	bl	8000978 <HAL_GetTick>
 800104a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800104c:	e01b      	b.n	8001086 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800104e:	f7ff fc93 	bl	8000978 <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d914      	bls.n	8001086 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	2b01      	cmp	r3, #1
 8001068:	d10d      	bne.n	8001086 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106e:	f043 0210 	orr.w	r2, r3, #16
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107a:	f043 0201 	orr.w	r2, r3, #1
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e007      	b.n	8001096 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	2b01      	cmp	r3, #1
 8001092:	d0dc      	beq.n	800104e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b084      	sub	sp, #16
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010aa:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d127      	bne.n	8001108 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80010ce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80010d2:	d115      	bne.n	8001100 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d111      	bne.n	8001100 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d105      	bne.n	8001100 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f8:	f043 0201 	orr.w	r2, r3, #1
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f7ff fe1d 	bl	8000d40 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001106:	e004      	b.n	8001112 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	4798      	blx	r3
}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b084      	sub	sp, #16
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001126:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001128:	68f8      	ldr	r0, [r7, #12]
 800112a:	f7ff fe12 	bl	8000d52 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001148:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001154:	f043 0204 	orr.w	r2, r3, #4
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f7ff fe01 	bl	8000d64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001188:	4013      	ands	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119e:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	60d3      	str	r3, [r2, #12]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <__NVIC_GetPriorityGrouping+0x18>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	f003 0307 	and.w	r3, r3, #7
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	db0b      	blt.n	80011fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	f003 021f 	and.w	r2, r3, #31
 80011e8:	4906      	ldr	r1, [pc, #24]	; (8001204 <__NVIC_EnableIRQ+0x34>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	095b      	lsrs	r3, r3, #5
 80011f0:	2001      	movs	r0, #1
 80011f2:	fa00 f202 	lsl.w	r2, r0, r2
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	e000e100 	.word	0xe000e100

08001208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	2b00      	cmp	r3, #0
 800121a:	db0a      	blt.n	8001232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	490c      	ldr	r1, [pc, #48]	; (8001254 <__NVIC_SetPriority+0x4c>)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	0112      	lsls	r2, r2, #4
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	440b      	add	r3, r1
 800122c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001230:	e00a      	b.n	8001248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4908      	ldr	r1, [pc, #32]	; (8001258 <__NVIC_SetPriority+0x50>)
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	3b04      	subs	r3, #4
 8001240:	0112      	lsls	r2, r2, #4
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	440b      	add	r3, r1
 8001246:	761a      	strb	r2, [r3, #24]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000e100 	.word	0xe000e100
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	; 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f1c3 0307 	rsb	r3, r3, #7
 8001276:	2b04      	cmp	r3, #4
 8001278:	bf28      	it	cs
 800127a:	2304      	movcs	r3, #4
 800127c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3304      	adds	r3, #4
 8001282:	2b06      	cmp	r3, #6
 8001284:	d902      	bls.n	800128c <NVIC_EncodePriority+0x30>
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3b03      	subs	r3, #3
 800128a:	e000      	b.n	800128e <NVIC_EncodePriority+0x32>
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	f04f 32ff 	mov.w	r2, #4294967295
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43da      	mvns	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	401a      	ands	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a4:	f04f 31ff 	mov.w	r1, #4294967295
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	43d9      	mvns	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	4313      	orrs	r3, r2
         );
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3724      	adds	r7, #36	; 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012d0:	d301      	bcc.n	80012d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00f      	b.n	80012f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <SysTick_Config+0x40>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012de:	210f      	movs	r1, #15
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	f7ff ff90 	bl	8001208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <SysTick_Config+0x40>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <SysTick_Config+0x40>)
 80012f0:	2207      	movs	r2, #7
 80012f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	e000e010 	.word	0xe000e010

08001304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff2d 	bl	800116c <__NVIC_SetPriorityGrouping>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800132c:	f7ff ff42 	bl	80011b4 <__NVIC_GetPriorityGrouping>
 8001330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68b9      	ldr	r1, [r7, #8]
 8001336:	6978      	ldr	r0, [r7, #20]
 8001338:	f7ff ff90 	bl	800125c <NVIC_EncodePriority>
 800133c:	4602      	mov	r2, r0
 800133e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff5f 	bl	8001208 <__NVIC_SetPriority>
}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff35 	bl	80011d0 <__NVIC_EnableIRQ>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ffa2 	bl	80012c0 <SysTick_Config>
 800137c:	4603      	mov	r3, r0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e043      	b.n	8001426 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b22      	ldr	r3, [pc, #136]	; (8001430 <HAL_DMA_Init+0xa8>)
 80013a6:	4413      	add	r3, r2
 80013a8:	4a22      	ldr	r2, [pc, #136]	; (8001434 <HAL_DMA_Init+0xac>)
 80013aa:	fba2 2303 	umull	r2, r3, r2, r3
 80013ae:	091b      	lsrs	r3, r3, #4
 80013b0:	009a      	lsls	r2, r3, #2
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a1f      	ldr	r2, [pc, #124]	; (8001438 <HAL_DMA_Init+0xb0>)
 80013ba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2202      	movs	r2, #2
 80013c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80013d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80013d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80013e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	bffdfff8 	.word	0xbffdfff8
 8001434:	cccccccd 	.word	0xcccccccd
 8001438:	40020000 	.word	0x40020000

0800143c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d101      	bne.n	800145c <HAL_DMA_Start_IT+0x20>
 8001458:	2302      	movs	r3, #2
 800145a:	e04b      	b.n	80014f4 <HAL_DMA_Start_IT+0xb8>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b01      	cmp	r3, #1
 800146e:	d13a      	bne.n	80014e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2202      	movs	r2, #2
 8001474:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2200      	movs	r2, #0
 800147c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0201 	bic.w	r2, r2, #1
 800148c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	68b9      	ldr	r1, [r7, #8]
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f000 f937 	bl	8001708 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d008      	beq.n	80014b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f042 020e 	orr.w	r2, r2, #14
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	e00f      	b.n	80014d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0204 	bic.w	r2, r2, #4
 80014c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 020a 	orr.w	r2, r2, #10
 80014d2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0201 	orr.w	r2, r2, #1
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	e005      	b.n	80014f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80014ee:	2302      	movs	r3, #2
 80014f0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	2204      	movs	r2, #4
 800151a:	409a      	lsls	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4013      	ands	r3, r2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d04f      	beq.n	80015c4 <HAL_DMA_IRQHandler+0xc8>
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	2b00      	cmp	r3, #0
 800152c:	d04a      	beq.n	80015c4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0320 	and.w	r3, r3, #32
 8001538:	2b00      	cmp	r3, #0
 800153a:	d107      	bne.n	800154c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0204 	bic.w	r2, r2, #4
 800154a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a66      	ldr	r2, [pc, #408]	; (80016ec <HAL_DMA_IRQHandler+0x1f0>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d029      	beq.n	80015aa <HAL_DMA_IRQHandler+0xae>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a65      	ldr	r2, [pc, #404]	; (80016f0 <HAL_DMA_IRQHandler+0x1f4>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d022      	beq.n	80015a6 <HAL_DMA_IRQHandler+0xaa>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a63      	ldr	r2, [pc, #396]	; (80016f4 <HAL_DMA_IRQHandler+0x1f8>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d01a      	beq.n	80015a0 <HAL_DMA_IRQHandler+0xa4>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a62      	ldr	r2, [pc, #392]	; (80016f8 <HAL_DMA_IRQHandler+0x1fc>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d012      	beq.n	800159a <HAL_DMA_IRQHandler+0x9e>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a60      	ldr	r2, [pc, #384]	; (80016fc <HAL_DMA_IRQHandler+0x200>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d00a      	beq.n	8001594 <HAL_DMA_IRQHandler+0x98>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a5f      	ldr	r2, [pc, #380]	; (8001700 <HAL_DMA_IRQHandler+0x204>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d102      	bne.n	800158e <HAL_DMA_IRQHandler+0x92>
 8001588:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800158c:	e00e      	b.n	80015ac <HAL_DMA_IRQHandler+0xb0>
 800158e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001592:	e00b      	b.n	80015ac <HAL_DMA_IRQHandler+0xb0>
 8001594:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001598:	e008      	b.n	80015ac <HAL_DMA_IRQHandler+0xb0>
 800159a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800159e:	e005      	b.n	80015ac <HAL_DMA_IRQHandler+0xb0>
 80015a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a4:	e002      	b.n	80015ac <HAL_DMA_IRQHandler+0xb0>
 80015a6:	2340      	movs	r3, #64	; 0x40
 80015a8:	e000      	b.n	80015ac <HAL_DMA_IRQHandler+0xb0>
 80015aa:	2304      	movs	r3, #4
 80015ac:	4a55      	ldr	r2, [pc, #340]	; (8001704 <HAL_DMA_IRQHandler+0x208>)
 80015ae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 8094 	beq.w	80016e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80015c2:	e08e      	b.n	80016e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	2202      	movs	r2, #2
 80015ca:	409a      	lsls	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4013      	ands	r3, r2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d056      	beq.n	8001682 <HAL_DMA_IRQHandler+0x186>
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d051      	beq.n	8001682 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0320 	and.w	r3, r3, #32
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d10b      	bne.n	8001604 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 020a 	bic.w	r2, r2, #10
 80015fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a38      	ldr	r2, [pc, #224]	; (80016ec <HAL_DMA_IRQHandler+0x1f0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d029      	beq.n	8001662 <HAL_DMA_IRQHandler+0x166>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a37      	ldr	r2, [pc, #220]	; (80016f0 <HAL_DMA_IRQHandler+0x1f4>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d022      	beq.n	800165e <HAL_DMA_IRQHandler+0x162>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a35      	ldr	r2, [pc, #212]	; (80016f4 <HAL_DMA_IRQHandler+0x1f8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d01a      	beq.n	8001658 <HAL_DMA_IRQHandler+0x15c>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a34      	ldr	r2, [pc, #208]	; (80016f8 <HAL_DMA_IRQHandler+0x1fc>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d012      	beq.n	8001652 <HAL_DMA_IRQHandler+0x156>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a32      	ldr	r2, [pc, #200]	; (80016fc <HAL_DMA_IRQHandler+0x200>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d00a      	beq.n	800164c <HAL_DMA_IRQHandler+0x150>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a31      	ldr	r2, [pc, #196]	; (8001700 <HAL_DMA_IRQHandler+0x204>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d102      	bne.n	8001646 <HAL_DMA_IRQHandler+0x14a>
 8001640:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001644:	e00e      	b.n	8001664 <HAL_DMA_IRQHandler+0x168>
 8001646:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800164a:	e00b      	b.n	8001664 <HAL_DMA_IRQHandler+0x168>
 800164c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001650:	e008      	b.n	8001664 <HAL_DMA_IRQHandler+0x168>
 8001652:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001656:	e005      	b.n	8001664 <HAL_DMA_IRQHandler+0x168>
 8001658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800165c:	e002      	b.n	8001664 <HAL_DMA_IRQHandler+0x168>
 800165e:	2320      	movs	r3, #32
 8001660:	e000      	b.n	8001664 <HAL_DMA_IRQHandler+0x168>
 8001662:	2302      	movs	r3, #2
 8001664:	4a27      	ldr	r2, [pc, #156]	; (8001704 <HAL_DMA_IRQHandler+0x208>)
 8001666:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001674:	2b00      	cmp	r3, #0
 8001676:	d034      	beq.n	80016e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001680:	e02f      	b.n	80016e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	2208      	movs	r2, #8
 8001688:	409a      	lsls	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4013      	ands	r3, r2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d028      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x1e8>
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	2b00      	cmp	r3, #0
 800169a:	d023      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 020e 	bic.w	r2, r2, #14
 80016aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b4:	2101      	movs	r1, #1
 80016b6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d004      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	4798      	blx	r3
    }
  }
  return;
 80016e2:	bf00      	nop
 80016e4:	bf00      	nop
}
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40020008 	.word	0x40020008
 80016f0:	4002001c 	.word	0x4002001c
 80016f4:	40020030 	.word	0x40020030
 80016f8:	40020044 	.word	0x40020044
 80016fc:	40020058 	.word	0x40020058
 8001700:	4002006c 	.word	0x4002006c
 8001704:	40020000 	.word	0x40020000

08001708 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171e:	2101      	movs	r1, #1
 8001720:	fa01 f202 	lsl.w	r2, r1, r2
 8001724:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b10      	cmp	r3, #16
 8001734:	d108      	bne.n	8001748 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001746:	e007      	b.n	8001758 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68ba      	ldr	r2, [r7, #8]
 800174e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	60da      	str	r2, [r3, #12]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
	...

08001764 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001764:	b480      	push	{r7}
 8001766:	b08b      	sub	sp, #44	; 0x2c
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800176e:	2300      	movs	r3, #0
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001776:	e169      	b.n	8001a4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001778:	2201      	movs	r2, #1
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	429a      	cmp	r2, r3
 8001792:	f040 8158 	bne.w	8001a46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	4a9a      	ldr	r2, [pc, #616]	; (8001a04 <HAL_GPIO_Init+0x2a0>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d05e      	beq.n	800185e <HAL_GPIO_Init+0xfa>
 80017a0:	4a98      	ldr	r2, [pc, #608]	; (8001a04 <HAL_GPIO_Init+0x2a0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d875      	bhi.n	8001892 <HAL_GPIO_Init+0x12e>
 80017a6:	4a98      	ldr	r2, [pc, #608]	; (8001a08 <HAL_GPIO_Init+0x2a4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d058      	beq.n	800185e <HAL_GPIO_Init+0xfa>
 80017ac:	4a96      	ldr	r2, [pc, #600]	; (8001a08 <HAL_GPIO_Init+0x2a4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d86f      	bhi.n	8001892 <HAL_GPIO_Init+0x12e>
 80017b2:	4a96      	ldr	r2, [pc, #600]	; (8001a0c <HAL_GPIO_Init+0x2a8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d052      	beq.n	800185e <HAL_GPIO_Init+0xfa>
 80017b8:	4a94      	ldr	r2, [pc, #592]	; (8001a0c <HAL_GPIO_Init+0x2a8>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d869      	bhi.n	8001892 <HAL_GPIO_Init+0x12e>
 80017be:	4a94      	ldr	r2, [pc, #592]	; (8001a10 <HAL_GPIO_Init+0x2ac>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d04c      	beq.n	800185e <HAL_GPIO_Init+0xfa>
 80017c4:	4a92      	ldr	r2, [pc, #584]	; (8001a10 <HAL_GPIO_Init+0x2ac>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d863      	bhi.n	8001892 <HAL_GPIO_Init+0x12e>
 80017ca:	4a92      	ldr	r2, [pc, #584]	; (8001a14 <HAL_GPIO_Init+0x2b0>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d046      	beq.n	800185e <HAL_GPIO_Init+0xfa>
 80017d0:	4a90      	ldr	r2, [pc, #576]	; (8001a14 <HAL_GPIO_Init+0x2b0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d85d      	bhi.n	8001892 <HAL_GPIO_Init+0x12e>
 80017d6:	2b12      	cmp	r3, #18
 80017d8:	d82a      	bhi.n	8001830 <HAL_GPIO_Init+0xcc>
 80017da:	2b12      	cmp	r3, #18
 80017dc:	d859      	bhi.n	8001892 <HAL_GPIO_Init+0x12e>
 80017de:	a201      	add	r2, pc, #4	; (adr r2, 80017e4 <HAL_GPIO_Init+0x80>)
 80017e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e4:	0800185f 	.word	0x0800185f
 80017e8:	08001839 	.word	0x08001839
 80017ec:	0800184b 	.word	0x0800184b
 80017f0:	0800188d 	.word	0x0800188d
 80017f4:	08001893 	.word	0x08001893
 80017f8:	08001893 	.word	0x08001893
 80017fc:	08001893 	.word	0x08001893
 8001800:	08001893 	.word	0x08001893
 8001804:	08001893 	.word	0x08001893
 8001808:	08001893 	.word	0x08001893
 800180c:	08001893 	.word	0x08001893
 8001810:	08001893 	.word	0x08001893
 8001814:	08001893 	.word	0x08001893
 8001818:	08001893 	.word	0x08001893
 800181c:	08001893 	.word	0x08001893
 8001820:	08001893 	.word	0x08001893
 8001824:	08001893 	.word	0x08001893
 8001828:	08001841 	.word	0x08001841
 800182c:	08001855 	.word	0x08001855
 8001830:	4a79      	ldr	r2, [pc, #484]	; (8001a18 <HAL_GPIO_Init+0x2b4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d013      	beq.n	800185e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001836:	e02c      	b.n	8001892 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	623b      	str	r3, [r7, #32]
          break;
 800183e:	e029      	b.n	8001894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	3304      	adds	r3, #4
 8001846:	623b      	str	r3, [r7, #32]
          break;
 8001848:	e024      	b.n	8001894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	3308      	adds	r3, #8
 8001850:	623b      	str	r3, [r7, #32]
          break;
 8001852:	e01f      	b.n	8001894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	330c      	adds	r3, #12
 800185a:	623b      	str	r3, [r7, #32]
          break;
 800185c:	e01a      	b.n	8001894 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d102      	bne.n	800186c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001866:	2304      	movs	r3, #4
 8001868:	623b      	str	r3, [r7, #32]
          break;
 800186a:	e013      	b.n	8001894 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d105      	bne.n	8001880 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001874:	2308      	movs	r3, #8
 8001876:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69fa      	ldr	r2, [r7, #28]
 800187c:	611a      	str	r2, [r3, #16]
          break;
 800187e:	e009      	b.n	8001894 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001880:	2308      	movs	r3, #8
 8001882:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	615a      	str	r2, [r3, #20]
          break;
 800188a:	e003      	b.n	8001894 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
          break;
 8001890:	e000      	b.n	8001894 <HAL_GPIO_Init+0x130>
          break;
 8001892:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	2bff      	cmp	r3, #255	; 0xff
 8001898:	d801      	bhi.n	800189e <HAL_GPIO_Init+0x13a>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	e001      	b.n	80018a2 <HAL_GPIO_Init+0x13e>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3304      	adds	r3, #4
 80018a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	2bff      	cmp	r3, #255	; 0xff
 80018a8:	d802      	bhi.n	80018b0 <HAL_GPIO_Init+0x14c>
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	e002      	b.n	80018b6 <HAL_GPIO_Init+0x152>
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	3b08      	subs	r3, #8
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	210f      	movs	r1, #15
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	fa01 f303 	lsl.w	r3, r1, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	401a      	ands	r2, r3
 80018c8:	6a39      	ldr	r1, [r7, #32]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	fa01 f303 	lsl.w	r3, r1, r3
 80018d0:	431a      	orrs	r2, r3
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 80b1 	beq.w	8001a46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018e4:	4b4d      	ldr	r3, [pc, #308]	; (8001a1c <HAL_GPIO_Init+0x2b8>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	4a4c      	ldr	r2, [pc, #304]	; (8001a1c <HAL_GPIO_Init+0x2b8>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6193      	str	r3, [r2, #24]
 80018f0:	4b4a      	ldr	r3, [pc, #296]	; (8001a1c <HAL_GPIO_Init+0x2b8>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018fc:	4a48      	ldr	r2, [pc, #288]	; (8001a20 <HAL_GPIO_Init+0x2bc>)
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	089b      	lsrs	r3, r3, #2
 8001902:	3302      	adds	r3, #2
 8001904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001908:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	220f      	movs	r2, #15
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	4013      	ands	r3, r2
 800191e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a40      	ldr	r2, [pc, #256]	; (8001a24 <HAL_GPIO_Init+0x2c0>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d013      	beq.n	8001950 <HAL_GPIO_Init+0x1ec>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a3f      	ldr	r2, [pc, #252]	; (8001a28 <HAL_GPIO_Init+0x2c4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d00d      	beq.n	800194c <HAL_GPIO_Init+0x1e8>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a3e      	ldr	r2, [pc, #248]	; (8001a2c <HAL_GPIO_Init+0x2c8>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d007      	beq.n	8001948 <HAL_GPIO_Init+0x1e4>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a3d      	ldr	r2, [pc, #244]	; (8001a30 <HAL_GPIO_Init+0x2cc>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d101      	bne.n	8001944 <HAL_GPIO_Init+0x1e0>
 8001940:	2303      	movs	r3, #3
 8001942:	e006      	b.n	8001952 <HAL_GPIO_Init+0x1ee>
 8001944:	2304      	movs	r3, #4
 8001946:	e004      	b.n	8001952 <HAL_GPIO_Init+0x1ee>
 8001948:	2302      	movs	r3, #2
 800194a:	e002      	b.n	8001952 <HAL_GPIO_Init+0x1ee>
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <HAL_GPIO_Init+0x1ee>
 8001950:	2300      	movs	r3, #0
 8001952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001954:	f002 0203 	and.w	r2, r2, #3
 8001958:	0092      	lsls	r2, r2, #2
 800195a:	4093      	lsls	r3, r2
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	4313      	orrs	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001962:	492f      	ldr	r1, [pc, #188]	; (8001a20 <HAL_GPIO_Init+0x2bc>)
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	089b      	lsrs	r3, r3, #2
 8001968:	3302      	adds	r3, #2
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d006      	beq.n	800198a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800197c:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <HAL_GPIO_Init+0x2d0>)
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	492c      	ldr	r1, [pc, #176]	; (8001a34 <HAL_GPIO_Init+0x2d0>)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	608b      	str	r3, [r1, #8]
 8001988:	e006      	b.n	8001998 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800198a:	4b2a      	ldr	r3, [pc, #168]	; (8001a34 <HAL_GPIO_Init+0x2d0>)
 800198c:	689a      	ldr	r2, [r3, #8]
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	43db      	mvns	r3, r3
 8001992:	4928      	ldr	r1, [pc, #160]	; (8001a34 <HAL_GPIO_Init+0x2d0>)
 8001994:	4013      	ands	r3, r2
 8001996:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d006      	beq.n	80019b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019a4:	4b23      	ldr	r3, [pc, #140]	; (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019a6:	68da      	ldr	r2, [r3, #12]
 80019a8:	4922      	ldr	r1, [pc, #136]	; (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	60cb      	str	r3, [r1, #12]
 80019b0:	e006      	b.n	80019c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019b2:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	491e      	ldr	r1, [pc, #120]	; (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019bc:	4013      	ands	r3, r2
 80019be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d006      	beq.n	80019da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	4918      	ldr	r1, [pc, #96]	; (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	604b      	str	r3, [r1, #4]
 80019d8:	e006      	b.n	80019e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019da:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	4914      	ldr	r1, [pc, #80]	; (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d021      	beq.n	8001a38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	490e      	ldr	r1, [pc, #56]	; (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	600b      	str	r3, [r1, #0]
 8001a00:	e021      	b.n	8001a46 <HAL_GPIO_Init+0x2e2>
 8001a02:	bf00      	nop
 8001a04:	10320000 	.word	0x10320000
 8001a08:	10310000 	.word	0x10310000
 8001a0c:	10220000 	.word	0x10220000
 8001a10:	10210000 	.word	0x10210000
 8001a14:	10120000 	.word	0x10120000
 8001a18:	10110000 	.word	0x10110000
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40010000 	.word	0x40010000
 8001a24:	40010800 	.word	0x40010800
 8001a28:	40010c00 	.word	0x40010c00
 8001a2c:	40011000 	.word	0x40011000
 8001a30:	40011400 	.word	0x40011400
 8001a34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_GPIO_Init+0x304>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	4909      	ldr	r1, [pc, #36]	; (8001a68 <HAL_GPIO_Init+0x304>)
 8001a42:	4013      	ands	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	3301      	adds	r3, #1
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	fa22 f303 	lsr.w	r3, r2, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f47f ae8e 	bne.w	8001778 <HAL_GPIO_Init+0x14>
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	372c      	adds	r7, #44	; 0x2c
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	40010400 	.word	0x40010400

08001a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	807b      	strh	r3, [r7, #2]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a7c:	787b      	ldrb	r3, [r7, #1]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a82:	887a      	ldrh	r2, [r7, #2]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a88:	e003      	b.n	8001a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a8a:	887b      	ldrh	r3, [r7, #2]
 8001a8c:	041a      	lsls	r2, r3, #16
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	611a      	str	r2, [r3, #16]
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	041a      	lsls	r2, r3, #16
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	43d9      	mvns	r1, r3
 8001aba:	887b      	ldrh	r3, [r7, #2]
 8001abc:	400b      	ands	r3, r1
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	611a      	str	r2, [r3, #16]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr
	...

08001ad0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e272      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 8087 	beq.w	8001bfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001af0:	4b92      	ldr	r3, [pc, #584]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b04      	cmp	r3, #4
 8001afa:	d00c      	beq.n	8001b16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001afc:	4b8f      	ldr	r3, [pc, #572]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d112      	bne.n	8001b2e <HAL_RCC_OscConfig+0x5e>
 8001b08:	4b8c      	ldr	r3, [pc, #560]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b14:	d10b      	bne.n	8001b2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b16:	4b89      	ldr	r3, [pc, #548]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d06c      	beq.n	8001bfc <HAL_RCC_OscConfig+0x12c>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d168      	bne.n	8001bfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e24c      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b36:	d106      	bne.n	8001b46 <HAL_RCC_OscConfig+0x76>
 8001b38:	4b80      	ldr	r3, [pc, #512]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a7f      	ldr	r2, [pc, #508]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	e02e      	b.n	8001ba4 <HAL_RCC_OscConfig+0xd4>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10c      	bne.n	8001b68 <HAL_RCC_OscConfig+0x98>
 8001b4e:	4b7b      	ldr	r3, [pc, #492]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a7a      	ldr	r2, [pc, #488]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	4b78      	ldr	r3, [pc, #480]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a77      	ldr	r2, [pc, #476]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	e01d      	b.n	8001ba4 <HAL_RCC_OscConfig+0xd4>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b70:	d10c      	bne.n	8001b8c <HAL_RCC_OscConfig+0xbc>
 8001b72:	4b72      	ldr	r3, [pc, #456]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a71      	ldr	r2, [pc, #452]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	4b6f      	ldr	r3, [pc, #444]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a6e      	ldr	r2, [pc, #440]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	e00b      	b.n	8001ba4 <HAL_RCC_OscConfig+0xd4>
 8001b8c:	4b6b      	ldr	r3, [pc, #428]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a6a      	ldr	r2, [pc, #424]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	4b68      	ldr	r3, [pc, #416]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a67      	ldr	r2, [pc, #412]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d013      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bac:	f7fe fee4 	bl	8000978 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb4:	f7fe fee0 	bl	8000978 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b64      	cmp	r3, #100	; 0x64
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e200      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc6:	4b5d      	ldr	r3, [pc, #372]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCC_OscConfig+0xe4>
 8001bd2:	e014      	b.n	8001bfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd4:	f7fe fed0 	bl	8000978 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bdc:	f7fe fecc 	bl	8000978 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b64      	cmp	r3, #100	; 0x64
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e1ec      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bee:	4b53      	ldr	r3, [pc, #332]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x10c>
 8001bfa:	e000      	b.n	8001bfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d063      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c0a:	4b4c      	ldr	r3, [pc, #304]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00b      	beq.n	8001c2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c16:	4b49      	ldr	r3, [pc, #292]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b08      	cmp	r3, #8
 8001c20:	d11c      	bne.n	8001c5c <HAL_RCC_OscConfig+0x18c>
 8001c22:	4b46      	ldr	r3, [pc, #280]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d116      	bne.n	8001c5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2e:	4b43      	ldr	r3, [pc, #268]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d005      	beq.n	8001c46 <HAL_RCC_OscConfig+0x176>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d001      	beq.n	8001c46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e1c0      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c46:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	4939      	ldr	r1, [pc, #228]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5a:	e03a      	b.n	8001cd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d020      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c64:	4b36      	ldr	r3, [pc, #216]	; (8001d40 <HAL_RCC_OscConfig+0x270>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6a:	f7fe fe85 	bl	8000978 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c72:	f7fe fe81 	bl	8000978 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e1a1      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c84:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f0      	beq.n	8001c72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c90:	4b2a      	ldr	r3, [pc, #168]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	4927      	ldr	r1, [pc, #156]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	600b      	str	r3, [r1, #0]
 8001ca4:	e015      	b.n	8001cd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ca6:	4b26      	ldr	r3, [pc, #152]	; (8001d40 <HAL_RCC_OscConfig+0x270>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7fe fe64 	bl	8000978 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb4:	f7fe fe60 	bl	8000978 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e180      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc6:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d03a      	beq.n	8001d54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d019      	beq.n	8001d1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce6:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <HAL_RCC_OscConfig+0x274>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cec:	f7fe fe44 	bl	8000978 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf4:	f7fe fe40 	bl	8000978 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e160      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d06:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d12:	2001      	movs	r0, #1
 8001d14:	f000 face 	bl	80022b4 <RCC_Delay>
 8001d18:	e01c      	b.n	8001d54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_RCC_OscConfig+0x274>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d20:	f7fe fe2a 	bl	8000978 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d26:	e00f      	b.n	8001d48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d28:	f7fe fe26 	bl	8000978 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d908      	bls.n	8001d48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e146      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4f8>
 8001d3a:	bf00      	nop
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	42420000 	.word	0x42420000
 8001d44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d48:	4b92      	ldr	r3, [pc, #584]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1e9      	bne.n	8001d28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80a6 	beq.w	8001eae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d62:	2300      	movs	r3, #0
 8001d64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d66:	4b8b      	ldr	r3, [pc, #556]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10d      	bne.n	8001d8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	4b88      	ldr	r3, [pc, #544]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	4a87      	ldr	r2, [pc, #540]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	61d3      	str	r3, [r2, #28]
 8001d7e:	4b85      	ldr	r3, [pc, #532]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8e:	4b82      	ldr	r3, [pc, #520]	; (8001f98 <HAL_RCC_OscConfig+0x4c8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d118      	bne.n	8001dcc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d9a:	4b7f      	ldr	r3, [pc, #508]	; (8001f98 <HAL_RCC_OscConfig+0x4c8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a7e      	ldr	r2, [pc, #504]	; (8001f98 <HAL_RCC_OscConfig+0x4c8>)
 8001da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001da6:	f7fe fde7 	bl	8000978 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dae:	f7fe fde3 	bl	8000978 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b64      	cmp	r3, #100	; 0x64
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e103      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc0:	4b75      	ldr	r3, [pc, #468]	; (8001f98 <HAL_RCC_OscConfig+0x4c8>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f0      	beq.n	8001dae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d106      	bne.n	8001de2 <HAL_RCC_OscConfig+0x312>
 8001dd4:	4b6f      	ldr	r3, [pc, #444]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	4a6e      	ldr	r2, [pc, #440]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6213      	str	r3, [r2, #32]
 8001de0:	e02d      	b.n	8001e3e <HAL_RCC_OscConfig+0x36e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10c      	bne.n	8001e04 <HAL_RCC_OscConfig+0x334>
 8001dea:	4b6a      	ldr	r3, [pc, #424]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	4a69      	ldr	r2, [pc, #420]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	f023 0301 	bic.w	r3, r3, #1
 8001df4:	6213      	str	r3, [r2, #32]
 8001df6:	4b67      	ldr	r3, [pc, #412]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	4a66      	ldr	r2, [pc, #408]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	f023 0304 	bic.w	r3, r3, #4
 8001e00:	6213      	str	r3, [r2, #32]
 8001e02:	e01c      	b.n	8001e3e <HAL_RCC_OscConfig+0x36e>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b05      	cmp	r3, #5
 8001e0a:	d10c      	bne.n	8001e26 <HAL_RCC_OscConfig+0x356>
 8001e0c:	4b61      	ldr	r3, [pc, #388]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	4a60      	ldr	r2, [pc, #384]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001e12:	f043 0304 	orr.w	r3, r3, #4
 8001e16:	6213      	str	r3, [r2, #32]
 8001e18:	4b5e      	ldr	r3, [pc, #376]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	4a5d      	ldr	r2, [pc, #372]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	6213      	str	r3, [r2, #32]
 8001e24:	e00b      	b.n	8001e3e <HAL_RCC_OscConfig+0x36e>
 8001e26:	4b5b      	ldr	r3, [pc, #364]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	4a5a      	ldr	r2, [pc, #360]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	f023 0301 	bic.w	r3, r3, #1
 8001e30:	6213      	str	r3, [r2, #32]
 8001e32:	4b58      	ldr	r3, [pc, #352]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	4a57      	ldr	r2, [pc, #348]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	f023 0304 	bic.w	r3, r3, #4
 8001e3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d015      	beq.n	8001e72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e46:	f7fe fd97 	bl	8000978 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4c:	e00a      	b.n	8001e64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4e:	f7fe fd93 	bl	8000978 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e0b1      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e64:	4b4b      	ldr	r3, [pc, #300]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0ee      	beq.n	8001e4e <HAL_RCC_OscConfig+0x37e>
 8001e70:	e014      	b.n	8001e9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e72:	f7fe fd81 	bl	8000978 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e78:	e00a      	b.n	8001e90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7a:	f7fe fd7d 	bl	8000978 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e09b      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e90:	4b40      	ldr	r3, [pc, #256]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1ee      	bne.n	8001e7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e9c:	7dfb      	ldrb	r3, [r7, #23]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d105      	bne.n	8001eae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea2:	4b3c      	ldr	r3, [pc, #240]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	4a3b      	ldr	r2, [pc, #236]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 8087 	beq.w	8001fc6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eb8:	4b36      	ldr	r3, [pc, #216]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 030c 	and.w	r3, r3, #12
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d061      	beq.n	8001f88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d146      	bne.n	8001f5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ecc:	4b33      	ldr	r3, [pc, #204]	; (8001f9c <HAL_RCC_OscConfig+0x4cc>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed2:	f7fe fd51 	bl	8000978 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eda:	f7fe fd4d 	bl	8000978 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e06d      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eec:	4b29      	ldr	r3, [pc, #164]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1f0      	bne.n	8001eda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f00:	d108      	bne.n	8001f14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f02:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	4921      	ldr	r1, [pc, #132]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f14:	4b1f      	ldr	r3, [pc, #124]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a19      	ldr	r1, [r3, #32]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	430b      	orrs	r3, r1
 8001f26:	491b      	ldr	r1, [pc, #108]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <HAL_RCC_OscConfig+0x4cc>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f32:	f7fe fd21 	bl	8000978 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3a:	f7fe fd1d 	bl	8000978 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e03d      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x46a>
 8001f58:	e035      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <HAL_RCC_OscConfig+0x4cc>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7fe fd0a 	bl	8000978 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f68:	f7fe fd06 	bl	8000978 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e026      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_RCC_OscConfig+0x4c4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0x498>
 8001f86:	e01e      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d107      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e019      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4f8>
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40007000 	.word	0x40007000
 8001f9c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_RCC_OscConfig+0x500>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d106      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d001      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40021000 	.word	0x40021000

08001fd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0d0      	b.n	800218a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe8:	4b6a      	ldr	r3, [pc, #424]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d910      	bls.n	8002018 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	4b67      	ldr	r3, [pc, #412]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 0207 	bic.w	r2, r3, #7
 8001ffe:	4965      	ldr	r1, [pc, #404]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b63      	ldr	r3, [pc, #396]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0b8      	b.n	800218a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d020      	beq.n	8002066 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002030:	4b59      	ldr	r3, [pc, #356]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	4a58      	ldr	r2, [pc, #352]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800203a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002048:	4b53      	ldr	r3, [pc, #332]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	4a52      	ldr	r2, [pc, #328]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002052:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002054:	4b50      	ldr	r3, [pc, #320]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	494d      	ldr	r1, [pc, #308]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	4313      	orrs	r3, r2
 8002064:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d040      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	4b47      	ldr	r3, [pc, #284]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d115      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e07f      	b.n	800218a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d107      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002092:	4b41      	ldr	r3, [pc, #260]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d109      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e073      	b.n	800218a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a2:	4b3d      	ldr	r3, [pc, #244]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e06b      	b.n	800218a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b2:	4b39      	ldr	r3, [pc, #228]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f023 0203 	bic.w	r2, r3, #3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4936      	ldr	r1, [pc, #216]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c4:	f7fe fc58 	bl	8000978 <HAL_GetTick>
 80020c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ca:	e00a      	b.n	80020e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020cc:	f7fe fc54 	bl	8000978 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e053      	b.n	800218a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e2:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 020c 	and.w	r2, r3, #12
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d1eb      	bne.n	80020cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020f4:	4b27      	ldr	r3, [pc, #156]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d210      	bcs.n	8002124 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002102:	4b24      	ldr	r3, [pc, #144]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 0207 	bic.w	r2, r3, #7
 800210a:	4922      	ldr	r1, [pc, #136]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	4313      	orrs	r3, r2
 8002110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002112:	4b20      	ldr	r3, [pc, #128]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e032      	b.n	800218a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002130:	4b19      	ldr	r3, [pc, #100]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4916      	ldr	r1, [pc, #88]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	4313      	orrs	r3, r2
 8002140:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d009      	beq.n	8002162 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800214e:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	490e      	ldr	r1, [pc, #56]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002162:	f000 f821 	bl	80021a8 <HAL_RCC_GetSysClockFreq>
 8002166:	4602      	mov	r2, r0
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	490a      	ldr	r1, [pc, #40]	; (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002174:	5ccb      	ldrb	r3, [r1, r3]
 8002176:	fa22 f303 	lsr.w	r3, r2, r3
 800217a:	4a09      	ldr	r2, [pc, #36]	; (80021a0 <HAL_RCC_ClockConfig+0x1cc>)
 800217c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe fbb6 	bl	80008f4 <HAL_InitTick>

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40022000 	.word	0x40022000
 8002198:	40021000 	.word	0x40021000
 800219c:	08003710 	.word	0x08003710
 80021a0:	20000000 	.word	0x20000000
 80021a4:	20000004 	.word	0x20000004

080021a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	2300      	movs	r3, #0
 80021bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021c2:	4b1e      	ldr	r3, [pc, #120]	; (800223c <HAL_RCC_GetSysClockFreq+0x94>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d002      	beq.n	80021d8 <HAL_RCC_GetSysClockFreq+0x30>
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d003      	beq.n	80021de <HAL_RCC_GetSysClockFreq+0x36>
 80021d6:	e027      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_RCC_GetSysClockFreq+0x98>)
 80021da:	613b      	str	r3, [r7, #16]
      break;
 80021dc:	e027      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	0c9b      	lsrs	r3, r3, #18
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	4a17      	ldr	r2, [pc, #92]	; (8002244 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021e8:	5cd3      	ldrb	r3, [r2, r3]
 80021ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d010      	beq.n	8002218 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021f6:	4b11      	ldr	r3, [pc, #68]	; (800223c <HAL_RCC_GetSysClockFreq+0x94>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	0c5b      	lsrs	r3, r3, #17
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	4a11      	ldr	r2, [pc, #68]	; (8002248 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002202:	5cd3      	ldrb	r3, [r2, r3]
 8002204:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a0d      	ldr	r2, [pc, #52]	; (8002240 <HAL_RCC_GetSysClockFreq+0x98>)
 800220a:	fb03 f202 	mul.w	r2, r3, r2
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	fbb2 f3f3 	udiv	r3, r2, r3
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	e004      	b.n	8002222 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a0c      	ldr	r2, [pc, #48]	; (800224c <HAL_RCC_GetSysClockFreq+0xa4>)
 800221c:	fb02 f303 	mul.w	r3, r2, r3
 8002220:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	613b      	str	r3, [r7, #16]
      break;
 8002226:	e002      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <HAL_RCC_GetSysClockFreq+0x98>)
 800222a:	613b      	str	r3, [r7, #16]
      break;
 800222c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800222e:	693b      	ldr	r3, [r7, #16]
}
 8002230:	4618      	mov	r0, r3
 8002232:	371c      	adds	r7, #28
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
 8002240:	007a1200 	.word	0x007a1200
 8002244:	08003728 	.word	0x08003728
 8002248:	08003738 	.word	0x08003738
 800224c:	003d0900 	.word	0x003d0900

08002250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002254:	4b02      	ldr	r3, [pc, #8]	; (8002260 <HAL_RCC_GetHCLKFreq+0x10>)
 8002256:	681b      	ldr	r3, [r3, #0]
}
 8002258:	4618      	mov	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr
 8002260:	20000000 	.word	0x20000000

08002264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002268:	f7ff fff2 	bl	8002250 <HAL_RCC_GetHCLKFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	4903      	ldr	r1, [pc, #12]	; (8002288 <HAL_RCC_GetPCLK1Freq+0x24>)
 800227a:	5ccb      	ldrb	r3, [r1, r3]
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002280:	4618      	mov	r0, r3
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40021000 	.word	0x40021000
 8002288:	08003720 	.word	0x08003720

0800228c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002290:	f7ff ffde 	bl	8002250 <HAL_RCC_GetHCLKFreq>
 8002294:	4602      	mov	r2, r0
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	0adb      	lsrs	r3, r3, #11
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	4903      	ldr	r1, [pc, #12]	; (80022b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022a2:	5ccb      	ldrb	r3, [r1, r3]
 80022a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40021000 	.word	0x40021000
 80022b0:	08003720 	.word	0x08003720

080022b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022bc:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <RCC_Delay+0x34>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <RCC_Delay+0x38>)
 80022c2:	fba2 2303 	umull	r2, r3, r2, r3
 80022c6:	0a5b      	lsrs	r3, r3, #9
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	fb02 f303 	mul.w	r3, r2, r3
 80022ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022d0:	bf00      	nop
  }
  while (Delay --);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1e5a      	subs	r2, r3, #1
 80022d6:	60fa      	str	r2, [r7, #12]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1f9      	bne.n	80022d0 <RCC_Delay+0x1c>
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	20000000 	.word	0x20000000
 80022ec:	10624dd3 	.word	0x10624dd3

080022f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d07d      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800230c:	2300      	movs	r3, #0
 800230e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002310:	4b4f      	ldr	r3, [pc, #316]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10d      	bne.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800231c:	4b4c      	ldr	r3, [pc, #304]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	4a4b      	ldr	r2, [pc, #300]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002326:	61d3      	str	r3, [r2, #28]
 8002328:	4b49      	ldr	r3, [pc, #292]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002334:	2301      	movs	r3, #1
 8002336:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002338:	4b46      	ldr	r3, [pc, #280]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002340:	2b00      	cmp	r3, #0
 8002342:	d118      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002344:	4b43      	ldr	r3, [pc, #268]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a42      	ldr	r2, [pc, #264]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800234a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002350:	f7fe fb12 	bl	8000978 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002356:	e008      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002358:	f7fe fb0e 	bl	8000978 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	; 0x64
 8002364:	d901      	bls.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e06d      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236a:	4b3a      	ldr	r3, [pc, #232]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002376:	4b36      	ldr	r3, [pc, #216]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800237e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d02e      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	429a      	cmp	r2, r3
 8002392:	d027      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002394:	4b2e      	ldr	r3, [pc, #184]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800239c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800239e:	4b2e      	ldr	r3, [pc, #184]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023a4:	4b2c      	ldr	r3, [pc, #176]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023aa:	4a29      	ldr	r2, [pc, #164]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d014      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ba:	f7fe fadd 	bl	8000978 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c0:	e00a      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c2:	f7fe fad9 	bl	8000978 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e036      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d8:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0ee      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023e4:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	4917      	ldr	r1, [pc, #92]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023f6:	7dfb      	ldrb	r3, [r7, #23]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d105      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023fc:	4b14      	ldr	r3, [pc, #80]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	4a13      	ldr	r2, [pc, #76]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002406:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d008      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002414:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	490b      	ldr	r1, [pc, #44]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002422:	4313      	orrs	r3, r2
 8002424:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0310 	and.w	r3, r3, #16
 800242e:	2b00      	cmp	r3, #0
 8002430:	d008      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002432:	4b07      	ldr	r3, [pc, #28]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	4904      	ldr	r1, [pc, #16]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002440:	4313      	orrs	r3, r2
 8002442:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40021000 	.word	0x40021000
 8002454:	40007000 	.word	0x40007000
 8002458:	42420440 	.word	0x42420440

0800245c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e042      	b.n	80024f4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7fe f8d6 	bl	8000634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2224      	movs	r2, #36	; 0x24
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800249e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f91d 	bl	80026e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695a      	ldr	r2, [r3, #20]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2220      	movs	r2, #32
 80024e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08a      	sub	sp, #40	; 0x28
 8002500:	af02      	add	r7, sp, #8
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	4613      	mov	r3, r2
 800250a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b20      	cmp	r3, #32
 800251a:	d16d      	bne.n	80025f8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <HAL_UART_Transmit+0x2c>
 8002522:	88fb      	ldrh	r3, [r7, #6]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e066      	b.n	80025fa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2221      	movs	r2, #33	; 0x21
 8002536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800253a:	f7fe fa1d 	bl	8000978 <HAL_GetTick>
 800253e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	88fa      	ldrh	r2, [r7, #6]
 8002544:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	88fa      	ldrh	r2, [r7, #6]
 800254a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002554:	d108      	bne.n	8002568 <HAL_UART_Transmit+0x6c>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d104      	bne.n	8002568 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	e003      	b.n	8002570 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800256c:	2300      	movs	r3, #0
 800256e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002570:	e02a      	b.n	80025c8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	2200      	movs	r2, #0
 800257a:	2180      	movs	r1, #128	; 0x80
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 f840 	bl	8002602 <UART_WaitOnFlagUntilTimeout>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e036      	b.n	80025fa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10b      	bne.n	80025aa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	3302      	adds	r3, #2
 80025a6:	61bb      	str	r3, [r7, #24]
 80025a8:	e007      	b.n	80025ba <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	781a      	ldrb	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	3301      	adds	r3, #1
 80025b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1cf      	bne.n	8002572 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2200      	movs	r2, #0
 80025da:	2140      	movs	r1, #64	; 0x40
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 f810 	bl	8002602 <UART_WaitOnFlagUntilTimeout>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e006      	b.n	80025fa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	e000      	b.n	80025fa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80025f8:	2302      	movs	r3, #2
  }
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3720      	adds	r7, #32
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b090      	sub	sp, #64	; 0x40
 8002606:	af00      	add	r7, sp, #0
 8002608:	60f8      	str	r0, [r7, #12]
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	603b      	str	r3, [r7, #0]
 800260e:	4613      	mov	r3, r2
 8002610:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002612:	e050      	b.n	80026b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261a:	d04c      	beq.n	80026b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800261c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800261e:	2b00      	cmp	r3, #0
 8002620:	d007      	beq.n	8002632 <UART_WaitOnFlagUntilTimeout+0x30>
 8002622:	f7fe f9a9 	bl	8000978 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800262e:	429a      	cmp	r2, r3
 8002630:	d241      	bcs.n	80026b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	330c      	adds	r3, #12
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800263a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263c:	e853 3f00 	ldrex	r3, [r3]
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	330c      	adds	r3, #12
 8002650:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002652:	637a      	str	r2, [r7, #52]	; 0x34
 8002654:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002656:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002658:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800265a:	e841 2300 	strex	r3, r2, [r1]
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1e5      	bne.n	8002632 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3314      	adds	r3, #20
 800266c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	e853 3f00 	ldrex	r3, [r3]
 8002674:	613b      	str	r3, [r7, #16]
   return(result);
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	63bb      	str	r3, [r7, #56]	; 0x38
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	3314      	adds	r3, #20
 8002684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002686:	623a      	str	r2, [r7, #32]
 8002688:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268a:	69f9      	ldr	r1, [r7, #28]
 800268c:	6a3a      	ldr	r2, [r7, #32]
 800268e:	e841 2300 	strex	r3, r2, [r1]
 8002692:	61bb      	str	r3, [r7, #24]
   return(result);
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1e5      	bne.n	8002666 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2220      	movs	r2, #32
 800269e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2220      	movs	r2, #32
 80026a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e00f      	b.n	80026d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	4013      	ands	r3, r2
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	bf0c      	ite	eq
 80026c6:	2301      	moveq	r3, #1
 80026c8:	2300      	movne	r3, #0
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d09f      	beq.n	8002614 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3740      	adds	r7, #64	; 0x40
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	4313      	orrs	r3, r2
 800270e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800271a:	f023 030c 	bic.w	r3, r3, #12
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6812      	ldr	r2, [r2, #0]
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	430b      	orrs	r3, r1
 8002726:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a2c      	ldr	r2, [pc, #176]	; (80027f4 <UART_SetConfig+0x114>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d103      	bne.n	8002750 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002748:	f7ff fda0 	bl	800228c <HAL_RCC_GetPCLK2Freq>
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	e002      	b.n	8002756 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002750:	f7ff fd88 	bl	8002264 <HAL_RCC_GetPCLK1Freq>
 8002754:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	009a      	lsls	r2, r3, #2
 8002760:	441a      	add	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	fbb2 f3f3 	udiv	r3, r2, r3
 800276c:	4a22      	ldr	r2, [pc, #136]	; (80027f8 <UART_SetConfig+0x118>)
 800276e:	fba2 2303 	umull	r2, r3, r2, r3
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	0119      	lsls	r1, r3, #4
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	009a      	lsls	r2, r3, #2
 8002780:	441a      	add	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	fbb2 f2f3 	udiv	r2, r2, r3
 800278c:	4b1a      	ldr	r3, [pc, #104]	; (80027f8 <UART_SetConfig+0x118>)
 800278e:	fba3 0302 	umull	r0, r3, r3, r2
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	2064      	movs	r0, #100	; 0x64
 8002796:	fb00 f303 	mul.w	r3, r0, r3
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	3332      	adds	r3, #50	; 0x32
 80027a0:	4a15      	ldr	r2, [pc, #84]	; (80027f8 <UART_SetConfig+0x118>)
 80027a2:	fba2 2303 	umull	r2, r3, r2, r3
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027ac:	4419      	add	r1, r3
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	009a      	lsls	r2, r3, #2
 80027b8:	441a      	add	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80027c4:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <UART_SetConfig+0x118>)
 80027c6:	fba3 0302 	umull	r0, r3, r3, r2
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	2064      	movs	r0, #100	; 0x64
 80027ce:	fb00 f303 	mul.w	r3, r0, r3
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	3332      	adds	r3, #50	; 0x32
 80027d8:	4a07      	ldr	r2, [pc, #28]	; (80027f8 <UART_SetConfig+0x118>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	f003 020f 	and.w	r2, r3, #15
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	440a      	add	r2, r1
 80027ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80027ec:	bf00      	nop
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40013800 	.word	0x40013800
 80027f8:	51eb851f 	.word	0x51eb851f

080027fc <std>:
 80027fc:	2300      	movs	r3, #0
 80027fe:	b510      	push	{r4, lr}
 8002800:	4604      	mov	r4, r0
 8002802:	e9c0 3300 	strd	r3, r3, [r0]
 8002806:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800280a:	6083      	str	r3, [r0, #8]
 800280c:	8181      	strh	r1, [r0, #12]
 800280e:	6643      	str	r3, [r0, #100]	; 0x64
 8002810:	81c2      	strh	r2, [r0, #14]
 8002812:	6183      	str	r3, [r0, #24]
 8002814:	4619      	mov	r1, r3
 8002816:	2208      	movs	r2, #8
 8002818:	305c      	adds	r0, #92	; 0x5c
 800281a:	f000 f90e 	bl	8002a3a <memset>
 800281e:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <std+0x58>)
 8002820:	6224      	str	r4, [r4, #32]
 8002822:	6263      	str	r3, [r4, #36]	; 0x24
 8002824:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <std+0x5c>)
 8002826:	62a3      	str	r3, [r4, #40]	; 0x28
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <std+0x60>)
 800282a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800282c:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <std+0x64>)
 800282e:	6323      	str	r3, [r4, #48]	; 0x30
 8002830:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <std+0x68>)
 8002832:	429c      	cmp	r4, r3
 8002834:	d006      	beq.n	8002844 <std+0x48>
 8002836:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800283a:	4294      	cmp	r4, r2
 800283c:	d002      	beq.n	8002844 <std+0x48>
 800283e:	33d0      	adds	r3, #208	; 0xd0
 8002840:	429c      	cmp	r4, r3
 8002842:	d105      	bne.n	8002850 <std+0x54>
 8002844:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800284c:	f000 b96e 	b.w	8002b2c <__retarget_lock_init_recursive>
 8002850:	bd10      	pop	{r4, pc}
 8002852:	bf00      	nop
 8002854:	080029b5 	.word	0x080029b5
 8002858:	080029d7 	.word	0x080029d7
 800285c:	08002a0f 	.word	0x08002a0f
 8002860:	08002a33 	.word	0x08002a33
 8002864:	20000154 	.word	0x20000154

08002868 <stdio_exit_handler>:
 8002868:	4a02      	ldr	r2, [pc, #8]	; (8002874 <stdio_exit_handler+0xc>)
 800286a:	4903      	ldr	r1, [pc, #12]	; (8002878 <stdio_exit_handler+0x10>)
 800286c:	4803      	ldr	r0, [pc, #12]	; (800287c <stdio_exit_handler+0x14>)
 800286e:	f000 b869 	b.w	8002944 <_fwalk_sglue>
 8002872:	bf00      	nop
 8002874:	2000000c 	.word	0x2000000c
 8002878:	080033cd 	.word	0x080033cd
 800287c:	20000018 	.word	0x20000018

08002880 <cleanup_stdio>:
 8002880:	6841      	ldr	r1, [r0, #4]
 8002882:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <cleanup_stdio+0x34>)
 8002884:	b510      	push	{r4, lr}
 8002886:	4299      	cmp	r1, r3
 8002888:	4604      	mov	r4, r0
 800288a:	d001      	beq.n	8002890 <cleanup_stdio+0x10>
 800288c:	f000 fd9e 	bl	80033cc <_fflush_r>
 8002890:	68a1      	ldr	r1, [r4, #8]
 8002892:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <cleanup_stdio+0x38>)
 8002894:	4299      	cmp	r1, r3
 8002896:	d002      	beq.n	800289e <cleanup_stdio+0x1e>
 8002898:	4620      	mov	r0, r4
 800289a:	f000 fd97 	bl	80033cc <_fflush_r>
 800289e:	68e1      	ldr	r1, [r4, #12]
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <cleanup_stdio+0x3c>)
 80028a2:	4299      	cmp	r1, r3
 80028a4:	d004      	beq.n	80028b0 <cleanup_stdio+0x30>
 80028a6:	4620      	mov	r0, r4
 80028a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028ac:	f000 bd8e 	b.w	80033cc <_fflush_r>
 80028b0:	bd10      	pop	{r4, pc}
 80028b2:	bf00      	nop
 80028b4:	20000154 	.word	0x20000154
 80028b8:	200001bc 	.word	0x200001bc
 80028bc:	20000224 	.word	0x20000224

080028c0 <global_stdio_init.part.0>:
 80028c0:	b510      	push	{r4, lr}
 80028c2:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <global_stdio_init.part.0+0x30>)
 80028c4:	4c0b      	ldr	r4, [pc, #44]	; (80028f4 <global_stdio_init.part.0+0x34>)
 80028c6:	4a0c      	ldr	r2, [pc, #48]	; (80028f8 <global_stdio_init.part.0+0x38>)
 80028c8:	4620      	mov	r0, r4
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	2104      	movs	r1, #4
 80028ce:	2200      	movs	r2, #0
 80028d0:	f7ff ff94 	bl	80027fc <std>
 80028d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80028d8:	2201      	movs	r2, #1
 80028da:	2109      	movs	r1, #9
 80028dc:	f7ff ff8e 	bl	80027fc <std>
 80028e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80028e4:	2202      	movs	r2, #2
 80028e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028ea:	2112      	movs	r1, #18
 80028ec:	f7ff bf86 	b.w	80027fc <std>
 80028f0:	2000028c 	.word	0x2000028c
 80028f4:	20000154 	.word	0x20000154
 80028f8:	08002869 	.word	0x08002869

080028fc <__sfp_lock_acquire>:
 80028fc:	4801      	ldr	r0, [pc, #4]	; (8002904 <__sfp_lock_acquire+0x8>)
 80028fe:	f000 b916 	b.w	8002b2e <__retarget_lock_acquire_recursive>
 8002902:	bf00      	nop
 8002904:	20000295 	.word	0x20000295

08002908 <__sfp_lock_release>:
 8002908:	4801      	ldr	r0, [pc, #4]	; (8002910 <__sfp_lock_release+0x8>)
 800290a:	f000 b911 	b.w	8002b30 <__retarget_lock_release_recursive>
 800290e:	bf00      	nop
 8002910:	20000295 	.word	0x20000295

08002914 <__sinit>:
 8002914:	b510      	push	{r4, lr}
 8002916:	4604      	mov	r4, r0
 8002918:	f7ff fff0 	bl	80028fc <__sfp_lock_acquire>
 800291c:	6a23      	ldr	r3, [r4, #32]
 800291e:	b11b      	cbz	r3, 8002928 <__sinit+0x14>
 8002920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002924:	f7ff bff0 	b.w	8002908 <__sfp_lock_release>
 8002928:	4b04      	ldr	r3, [pc, #16]	; (800293c <__sinit+0x28>)
 800292a:	6223      	str	r3, [r4, #32]
 800292c:	4b04      	ldr	r3, [pc, #16]	; (8002940 <__sinit+0x2c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f5      	bne.n	8002920 <__sinit+0xc>
 8002934:	f7ff ffc4 	bl	80028c0 <global_stdio_init.part.0>
 8002938:	e7f2      	b.n	8002920 <__sinit+0xc>
 800293a:	bf00      	nop
 800293c:	08002881 	.word	0x08002881
 8002940:	2000028c 	.word	0x2000028c

08002944 <_fwalk_sglue>:
 8002944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002948:	4607      	mov	r7, r0
 800294a:	4688      	mov	r8, r1
 800294c:	4614      	mov	r4, r2
 800294e:	2600      	movs	r6, #0
 8002950:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002954:	f1b9 0901 	subs.w	r9, r9, #1
 8002958:	d505      	bpl.n	8002966 <_fwalk_sglue+0x22>
 800295a:	6824      	ldr	r4, [r4, #0]
 800295c:	2c00      	cmp	r4, #0
 800295e:	d1f7      	bne.n	8002950 <_fwalk_sglue+0xc>
 8002960:	4630      	mov	r0, r6
 8002962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002966:	89ab      	ldrh	r3, [r5, #12]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d907      	bls.n	800297c <_fwalk_sglue+0x38>
 800296c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002970:	3301      	adds	r3, #1
 8002972:	d003      	beq.n	800297c <_fwalk_sglue+0x38>
 8002974:	4629      	mov	r1, r5
 8002976:	4638      	mov	r0, r7
 8002978:	47c0      	blx	r8
 800297a:	4306      	orrs	r6, r0
 800297c:	3568      	adds	r5, #104	; 0x68
 800297e:	e7e9      	b.n	8002954 <_fwalk_sglue+0x10>

08002980 <iprintf>:
 8002980:	b40f      	push	{r0, r1, r2, r3}
 8002982:	b507      	push	{r0, r1, r2, lr}
 8002984:	4906      	ldr	r1, [pc, #24]	; (80029a0 <iprintf+0x20>)
 8002986:	ab04      	add	r3, sp, #16
 8002988:	6808      	ldr	r0, [r1, #0]
 800298a:	f853 2b04 	ldr.w	r2, [r3], #4
 800298e:	6881      	ldr	r1, [r0, #8]
 8002990:	9301      	str	r3, [sp, #4]
 8002992:	f000 f9eb 	bl	8002d6c <_vfiprintf_r>
 8002996:	b003      	add	sp, #12
 8002998:	f85d eb04 	ldr.w	lr, [sp], #4
 800299c:	b004      	add	sp, #16
 800299e:	4770      	bx	lr
 80029a0:	20000064 	.word	0x20000064

080029a4 <putchar>:
 80029a4:	4b02      	ldr	r3, [pc, #8]	; (80029b0 <putchar+0xc>)
 80029a6:	4601      	mov	r1, r0
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	6882      	ldr	r2, [r0, #8]
 80029ac:	f000 bd36 	b.w	800341c <_putc_r>
 80029b0:	20000064 	.word	0x20000064

080029b4 <__sread>:
 80029b4:	b510      	push	{r4, lr}
 80029b6:	460c      	mov	r4, r1
 80029b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029bc:	f000 f868 	bl	8002a90 <_read_r>
 80029c0:	2800      	cmp	r0, #0
 80029c2:	bfab      	itete	ge
 80029c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80029c6:	89a3      	ldrhlt	r3, [r4, #12]
 80029c8:	181b      	addge	r3, r3, r0
 80029ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80029ce:	bfac      	ite	ge
 80029d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80029d2:	81a3      	strhlt	r3, [r4, #12]
 80029d4:	bd10      	pop	{r4, pc}

080029d6 <__swrite>:
 80029d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029da:	461f      	mov	r7, r3
 80029dc:	898b      	ldrh	r3, [r1, #12]
 80029de:	4605      	mov	r5, r0
 80029e0:	05db      	lsls	r3, r3, #23
 80029e2:	460c      	mov	r4, r1
 80029e4:	4616      	mov	r6, r2
 80029e6:	d505      	bpl.n	80029f4 <__swrite+0x1e>
 80029e8:	2302      	movs	r3, #2
 80029ea:	2200      	movs	r2, #0
 80029ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029f0:	f000 f83c 	bl	8002a6c <_lseek_r>
 80029f4:	89a3      	ldrh	r3, [r4, #12]
 80029f6:	4632      	mov	r2, r6
 80029f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029fc:	81a3      	strh	r3, [r4, #12]
 80029fe:	4628      	mov	r0, r5
 8002a00:	463b      	mov	r3, r7
 8002a02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a0a:	f000 b853 	b.w	8002ab4 <_write_r>

08002a0e <__sseek>:
 8002a0e:	b510      	push	{r4, lr}
 8002a10:	460c      	mov	r4, r1
 8002a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a16:	f000 f829 	bl	8002a6c <_lseek_r>
 8002a1a:	1c43      	adds	r3, r0, #1
 8002a1c:	89a3      	ldrh	r3, [r4, #12]
 8002a1e:	bf15      	itete	ne
 8002a20:	6560      	strne	r0, [r4, #84]	; 0x54
 8002a22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002a26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002a2a:	81a3      	strheq	r3, [r4, #12]
 8002a2c:	bf18      	it	ne
 8002a2e:	81a3      	strhne	r3, [r4, #12]
 8002a30:	bd10      	pop	{r4, pc}

08002a32 <__sclose>:
 8002a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a36:	f000 b809 	b.w	8002a4c <_close_r>

08002a3a <memset>:
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4402      	add	r2, r0
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d100      	bne.n	8002a44 <memset+0xa>
 8002a42:	4770      	bx	lr
 8002a44:	f803 1b01 	strb.w	r1, [r3], #1
 8002a48:	e7f9      	b.n	8002a3e <memset+0x4>
	...

08002a4c <_close_r>:
 8002a4c:	b538      	push	{r3, r4, r5, lr}
 8002a4e:	2300      	movs	r3, #0
 8002a50:	4d05      	ldr	r5, [pc, #20]	; (8002a68 <_close_r+0x1c>)
 8002a52:	4604      	mov	r4, r0
 8002a54:	4608      	mov	r0, r1
 8002a56:	602b      	str	r3, [r5, #0]
 8002a58:	f7fd fea3 	bl	80007a2 <_close>
 8002a5c:	1c43      	adds	r3, r0, #1
 8002a5e:	d102      	bne.n	8002a66 <_close_r+0x1a>
 8002a60:	682b      	ldr	r3, [r5, #0]
 8002a62:	b103      	cbz	r3, 8002a66 <_close_r+0x1a>
 8002a64:	6023      	str	r3, [r4, #0]
 8002a66:	bd38      	pop	{r3, r4, r5, pc}
 8002a68:	20000290 	.word	0x20000290

08002a6c <_lseek_r>:
 8002a6c:	b538      	push	{r3, r4, r5, lr}
 8002a6e:	4604      	mov	r4, r0
 8002a70:	4608      	mov	r0, r1
 8002a72:	4611      	mov	r1, r2
 8002a74:	2200      	movs	r2, #0
 8002a76:	4d05      	ldr	r5, [pc, #20]	; (8002a8c <_lseek_r+0x20>)
 8002a78:	602a      	str	r2, [r5, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f7fd feb5 	bl	80007ea <_lseek>
 8002a80:	1c43      	adds	r3, r0, #1
 8002a82:	d102      	bne.n	8002a8a <_lseek_r+0x1e>
 8002a84:	682b      	ldr	r3, [r5, #0]
 8002a86:	b103      	cbz	r3, 8002a8a <_lseek_r+0x1e>
 8002a88:	6023      	str	r3, [r4, #0]
 8002a8a:	bd38      	pop	{r3, r4, r5, pc}
 8002a8c:	20000290 	.word	0x20000290

08002a90 <_read_r>:
 8002a90:	b538      	push	{r3, r4, r5, lr}
 8002a92:	4604      	mov	r4, r0
 8002a94:	4608      	mov	r0, r1
 8002a96:	4611      	mov	r1, r2
 8002a98:	2200      	movs	r2, #0
 8002a9a:	4d05      	ldr	r5, [pc, #20]	; (8002ab0 <_read_r+0x20>)
 8002a9c:	602a      	str	r2, [r5, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f7fd fe46 	bl	8000730 <_read>
 8002aa4:	1c43      	adds	r3, r0, #1
 8002aa6:	d102      	bne.n	8002aae <_read_r+0x1e>
 8002aa8:	682b      	ldr	r3, [r5, #0]
 8002aaa:	b103      	cbz	r3, 8002aae <_read_r+0x1e>
 8002aac:	6023      	str	r3, [r4, #0]
 8002aae:	bd38      	pop	{r3, r4, r5, pc}
 8002ab0:	20000290 	.word	0x20000290

08002ab4 <_write_r>:
 8002ab4:	b538      	push	{r3, r4, r5, lr}
 8002ab6:	4604      	mov	r4, r0
 8002ab8:	4608      	mov	r0, r1
 8002aba:	4611      	mov	r1, r2
 8002abc:	2200      	movs	r2, #0
 8002abe:	4d05      	ldr	r5, [pc, #20]	; (8002ad4 <_write_r+0x20>)
 8002ac0:	602a      	str	r2, [r5, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f7fd fe51 	bl	800076a <_write>
 8002ac8:	1c43      	adds	r3, r0, #1
 8002aca:	d102      	bne.n	8002ad2 <_write_r+0x1e>
 8002acc:	682b      	ldr	r3, [r5, #0]
 8002ace:	b103      	cbz	r3, 8002ad2 <_write_r+0x1e>
 8002ad0:	6023      	str	r3, [r4, #0]
 8002ad2:	bd38      	pop	{r3, r4, r5, pc}
 8002ad4:	20000290 	.word	0x20000290

08002ad8 <__errno>:
 8002ad8:	4b01      	ldr	r3, [pc, #4]	; (8002ae0 <__errno+0x8>)
 8002ada:	6818      	ldr	r0, [r3, #0]
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	20000064 	.word	0x20000064

08002ae4 <__libc_init_array>:
 8002ae4:	b570      	push	{r4, r5, r6, lr}
 8002ae6:	2600      	movs	r6, #0
 8002ae8:	4d0c      	ldr	r5, [pc, #48]	; (8002b1c <__libc_init_array+0x38>)
 8002aea:	4c0d      	ldr	r4, [pc, #52]	; (8002b20 <__libc_init_array+0x3c>)
 8002aec:	1b64      	subs	r4, r4, r5
 8002aee:	10a4      	asrs	r4, r4, #2
 8002af0:	42a6      	cmp	r6, r4
 8002af2:	d109      	bne.n	8002b08 <__libc_init_array+0x24>
 8002af4:	f000 fdfe 	bl	80036f4 <_init>
 8002af8:	2600      	movs	r6, #0
 8002afa:	4d0a      	ldr	r5, [pc, #40]	; (8002b24 <__libc_init_array+0x40>)
 8002afc:	4c0a      	ldr	r4, [pc, #40]	; (8002b28 <__libc_init_array+0x44>)
 8002afe:	1b64      	subs	r4, r4, r5
 8002b00:	10a4      	asrs	r4, r4, #2
 8002b02:	42a6      	cmp	r6, r4
 8002b04:	d105      	bne.n	8002b12 <__libc_init_array+0x2e>
 8002b06:	bd70      	pop	{r4, r5, r6, pc}
 8002b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b0c:	4798      	blx	r3
 8002b0e:	3601      	adds	r6, #1
 8002b10:	e7ee      	b.n	8002af0 <__libc_init_array+0xc>
 8002b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b16:	4798      	blx	r3
 8002b18:	3601      	adds	r6, #1
 8002b1a:	e7f2      	b.n	8002b02 <__libc_init_array+0x1e>
 8002b1c:	08003770 	.word	0x08003770
 8002b20:	08003770 	.word	0x08003770
 8002b24:	08003770 	.word	0x08003770
 8002b28:	08003774 	.word	0x08003774

08002b2c <__retarget_lock_init_recursive>:
 8002b2c:	4770      	bx	lr

08002b2e <__retarget_lock_acquire_recursive>:
 8002b2e:	4770      	bx	lr

08002b30 <__retarget_lock_release_recursive>:
 8002b30:	4770      	bx	lr
	...

08002b34 <_free_r>:
 8002b34:	b538      	push	{r3, r4, r5, lr}
 8002b36:	4605      	mov	r5, r0
 8002b38:	2900      	cmp	r1, #0
 8002b3a:	d040      	beq.n	8002bbe <_free_r+0x8a>
 8002b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b40:	1f0c      	subs	r4, r1, #4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	bfb8      	it	lt
 8002b46:	18e4      	addlt	r4, r4, r3
 8002b48:	f000 f8dc 	bl	8002d04 <__malloc_lock>
 8002b4c:	4a1c      	ldr	r2, [pc, #112]	; (8002bc0 <_free_r+0x8c>)
 8002b4e:	6813      	ldr	r3, [r2, #0]
 8002b50:	b933      	cbnz	r3, 8002b60 <_free_r+0x2c>
 8002b52:	6063      	str	r3, [r4, #4]
 8002b54:	6014      	str	r4, [r2, #0]
 8002b56:	4628      	mov	r0, r5
 8002b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b5c:	f000 b8d8 	b.w	8002d10 <__malloc_unlock>
 8002b60:	42a3      	cmp	r3, r4
 8002b62:	d908      	bls.n	8002b76 <_free_r+0x42>
 8002b64:	6820      	ldr	r0, [r4, #0]
 8002b66:	1821      	adds	r1, r4, r0
 8002b68:	428b      	cmp	r3, r1
 8002b6a:	bf01      	itttt	eq
 8002b6c:	6819      	ldreq	r1, [r3, #0]
 8002b6e:	685b      	ldreq	r3, [r3, #4]
 8002b70:	1809      	addeq	r1, r1, r0
 8002b72:	6021      	streq	r1, [r4, #0]
 8002b74:	e7ed      	b.n	8002b52 <_free_r+0x1e>
 8002b76:	461a      	mov	r2, r3
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	b10b      	cbz	r3, 8002b80 <_free_r+0x4c>
 8002b7c:	42a3      	cmp	r3, r4
 8002b7e:	d9fa      	bls.n	8002b76 <_free_r+0x42>
 8002b80:	6811      	ldr	r1, [r2, #0]
 8002b82:	1850      	adds	r0, r2, r1
 8002b84:	42a0      	cmp	r0, r4
 8002b86:	d10b      	bne.n	8002ba0 <_free_r+0x6c>
 8002b88:	6820      	ldr	r0, [r4, #0]
 8002b8a:	4401      	add	r1, r0
 8002b8c:	1850      	adds	r0, r2, r1
 8002b8e:	4283      	cmp	r3, r0
 8002b90:	6011      	str	r1, [r2, #0]
 8002b92:	d1e0      	bne.n	8002b56 <_free_r+0x22>
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	4408      	add	r0, r1
 8002b9a:	6010      	str	r0, [r2, #0]
 8002b9c:	6053      	str	r3, [r2, #4]
 8002b9e:	e7da      	b.n	8002b56 <_free_r+0x22>
 8002ba0:	d902      	bls.n	8002ba8 <_free_r+0x74>
 8002ba2:	230c      	movs	r3, #12
 8002ba4:	602b      	str	r3, [r5, #0]
 8002ba6:	e7d6      	b.n	8002b56 <_free_r+0x22>
 8002ba8:	6820      	ldr	r0, [r4, #0]
 8002baa:	1821      	adds	r1, r4, r0
 8002bac:	428b      	cmp	r3, r1
 8002bae:	bf01      	itttt	eq
 8002bb0:	6819      	ldreq	r1, [r3, #0]
 8002bb2:	685b      	ldreq	r3, [r3, #4]
 8002bb4:	1809      	addeq	r1, r1, r0
 8002bb6:	6021      	streq	r1, [r4, #0]
 8002bb8:	6063      	str	r3, [r4, #4]
 8002bba:	6054      	str	r4, [r2, #4]
 8002bbc:	e7cb      	b.n	8002b56 <_free_r+0x22>
 8002bbe:	bd38      	pop	{r3, r4, r5, pc}
 8002bc0:	20000298 	.word	0x20000298

08002bc4 <sbrk_aligned>:
 8002bc4:	b570      	push	{r4, r5, r6, lr}
 8002bc6:	4e0e      	ldr	r6, [pc, #56]	; (8002c00 <sbrk_aligned+0x3c>)
 8002bc8:	460c      	mov	r4, r1
 8002bca:	6831      	ldr	r1, [r6, #0]
 8002bcc:	4605      	mov	r5, r0
 8002bce:	b911      	cbnz	r1, 8002bd6 <sbrk_aligned+0x12>
 8002bd0:	f000 fcee 	bl	80035b0 <_sbrk_r>
 8002bd4:	6030      	str	r0, [r6, #0]
 8002bd6:	4621      	mov	r1, r4
 8002bd8:	4628      	mov	r0, r5
 8002bda:	f000 fce9 	bl	80035b0 <_sbrk_r>
 8002bde:	1c43      	adds	r3, r0, #1
 8002be0:	d00a      	beq.n	8002bf8 <sbrk_aligned+0x34>
 8002be2:	1cc4      	adds	r4, r0, #3
 8002be4:	f024 0403 	bic.w	r4, r4, #3
 8002be8:	42a0      	cmp	r0, r4
 8002bea:	d007      	beq.n	8002bfc <sbrk_aligned+0x38>
 8002bec:	1a21      	subs	r1, r4, r0
 8002bee:	4628      	mov	r0, r5
 8002bf0:	f000 fcde 	bl	80035b0 <_sbrk_r>
 8002bf4:	3001      	adds	r0, #1
 8002bf6:	d101      	bne.n	8002bfc <sbrk_aligned+0x38>
 8002bf8:	f04f 34ff 	mov.w	r4, #4294967295
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	bd70      	pop	{r4, r5, r6, pc}
 8002c00:	2000029c 	.word	0x2000029c

08002c04 <_malloc_r>:
 8002c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c08:	1ccd      	adds	r5, r1, #3
 8002c0a:	f025 0503 	bic.w	r5, r5, #3
 8002c0e:	3508      	adds	r5, #8
 8002c10:	2d0c      	cmp	r5, #12
 8002c12:	bf38      	it	cc
 8002c14:	250c      	movcc	r5, #12
 8002c16:	2d00      	cmp	r5, #0
 8002c18:	4607      	mov	r7, r0
 8002c1a:	db01      	blt.n	8002c20 <_malloc_r+0x1c>
 8002c1c:	42a9      	cmp	r1, r5
 8002c1e:	d905      	bls.n	8002c2c <_malloc_r+0x28>
 8002c20:	230c      	movs	r3, #12
 8002c22:	2600      	movs	r6, #0
 8002c24:	603b      	str	r3, [r7, #0]
 8002c26:	4630      	mov	r0, r6
 8002c28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002d00 <_malloc_r+0xfc>
 8002c30:	f000 f868 	bl	8002d04 <__malloc_lock>
 8002c34:	f8d8 3000 	ldr.w	r3, [r8]
 8002c38:	461c      	mov	r4, r3
 8002c3a:	bb5c      	cbnz	r4, 8002c94 <_malloc_r+0x90>
 8002c3c:	4629      	mov	r1, r5
 8002c3e:	4638      	mov	r0, r7
 8002c40:	f7ff ffc0 	bl	8002bc4 <sbrk_aligned>
 8002c44:	1c43      	adds	r3, r0, #1
 8002c46:	4604      	mov	r4, r0
 8002c48:	d155      	bne.n	8002cf6 <_malloc_r+0xf2>
 8002c4a:	f8d8 4000 	ldr.w	r4, [r8]
 8002c4e:	4626      	mov	r6, r4
 8002c50:	2e00      	cmp	r6, #0
 8002c52:	d145      	bne.n	8002ce0 <_malloc_r+0xdc>
 8002c54:	2c00      	cmp	r4, #0
 8002c56:	d048      	beq.n	8002cea <_malloc_r+0xe6>
 8002c58:	6823      	ldr	r3, [r4, #0]
 8002c5a:	4631      	mov	r1, r6
 8002c5c:	4638      	mov	r0, r7
 8002c5e:	eb04 0903 	add.w	r9, r4, r3
 8002c62:	f000 fca5 	bl	80035b0 <_sbrk_r>
 8002c66:	4581      	cmp	r9, r0
 8002c68:	d13f      	bne.n	8002cea <_malloc_r+0xe6>
 8002c6a:	6821      	ldr	r1, [r4, #0]
 8002c6c:	4638      	mov	r0, r7
 8002c6e:	1a6d      	subs	r5, r5, r1
 8002c70:	4629      	mov	r1, r5
 8002c72:	f7ff ffa7 	bl	8002bc4 <sbrk_aligned>
 8002c76:	3001      	adds	r0, #1
 8002c78:	d037      	beq.n	8002cea <_malloc_r+0xe6>
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	442b      	add	r3, r5
 8002c7e:	6023      	str	r3, [r4, #0]
 8002c80:	f8d8 3000 	ldr.w	r3, [r8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d038      	beq.n	8002cfa <_malloc_r+0xf6>
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	42a2      	cmp	r2, r4
 8002c8c:	d12b      	bne.n	8002ce6 <_malloc_r+0xe2>
 8002c8e:	2200      	movs	r2, #0
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	e00f      	b.n	8002cb4 <_malloc_r+0xb0>
 8002c94:	6822      	ldr	r2, [r4, #0]
 8002c96:	1b52      	subs	r2, r2, r5
 8002c98:	d41f      	bmi.n	8002cda <_malloc_r+0xd6>
 8002c9a:	2a0b      	cmp	r2, #11
 8002c9c:	d917      	bls.n	8002cce <_malloc_r+0xca>
 8002c9e:	1961      	adds	r1, r4, r5
 8002ca0:	42a3      	cmp	r3, r4
 8002ca2:	6025      	str	r5, [r4, #0]
 8002ca4:	bf18      	it	ne
 8002ca6:	6059      	strne	r1, [r3, #4]
 8002ca8:	6863      	ldr	r3, [r4, #4]
 8002caa:	bf08      	it	eq
 8002cac:	f8c8 1000 	streq.w	r1, [r8]
 8002cb0:	5162      	str	r2, [r4, r5]
 8002cb2:	604b      	str	r3, [r1, #4]
 8002cb4:	4638      	mov	r0, r7
 8002cb6:	f104 060b 	add.w	r6, r4, #11
 8002cba:	f000 f829 	bl	8002d10 <__malloc_unlock>
 8002cbe:	f026 0607 	bic.w	r6, r6, #7
 8002cc2:	1d23      	adds	r3, r4, #4
 8002cc4:	1af2      	subs	r2, r6, r3
 8002cc6:	d0ae      	beq.n	8002c26 <_malloc_r+0x22>
 8002cc8:	1b9b      	subs	r3, r3, r6
 8002cca:	50a3      	str	r3, [r4, r2]
 8002ccc:	e7ab      	b.n	8002c26 <_malloc_r+0x22>
 8002cce:	42a3      	cmp	r3, r4
 8002cd0:	6862      	ldr	r2, [r4, #4]
 8002cd2:	d1dd      	bne.n	8002c90 <_malloc_r+0x8c>
 8002cd4:	f8c8 2000 	str.w	r2, [r8]
 8002cd8:	e7ec      	b.n	8002cb4 <_malloc_r+0xb0>
 8002cda:	4623      	mov	r3, r4
 8002cdc:	6864      	ldr	r4, [r4, #4]
 8002cde:	e7ac      	b.n	8002c3a <_malloc_r+0x36>
 8002ce0:	4634      	mov	r4, r6
 8002ce2:	6876      	ldr	r6, [r6, #4]
 8002ce4:	e7b4      	b.n	8002c50 <_malloc_r+0x4c>
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	e7cc      	b.n	8002c84 <_malloc_r+0x80>
 8002cea:	230c      	movs	r3, #12
 8002cec:	4638      	mov	r0, r7
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	f000 f80e 	bl	8002d10 <__malloc_unlock>
 8002cf4:	e797      	b.n	8002c26 <_malloc_r+0x22>
 8002cf6:	6025      	str	r5, [r4, #0]
 8002cf8:	e7dc      	b.n	8002cb4 <_malloc_r+0xb0>
 8002cfa:	605b      	str	r3, [r3, #4]
 8002cfc:	deff      	udf	#255	; 0xff
 8002cfe:	bf00      	nop
 8002d00:	20000298 	.word	0x20000298

08002d04 <__malloc_lock>:
 8002d04:	4801      	ldr	r0, [pc, #4]	; (8002d0c <__malloc_lock+0x8>)
 8002d06:	f7ff bf12 	b.w	8002b2e <__retarget_lock_acquire_recursive>
 8002d0a:	bf00      	nop
 8002d0c:	20000294 	.word	0x20000294

08002d10 <__malloc_unlock>:
 8002d10:	4801      	ldr	r0, [pc, #4]	; (8002d18 <__malloc_unlock+0x8>)
 8002d12:	f7ff bf0d 	b.w	8002b30 <__retarget_lock_release_recursive>
 8002d16:	bf00      	nop
 8002d18:	20000294 	.word	0x20000294

08002d1c <__sfputc_r>:
 8002d1c:	6893      	ldr	r3, [r2, #8]
 8002d1e:	b410      	push	{r4}
 8002d20:	3b01      	subs	r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	6093      	str	r3, [r2, #8]
 8002d26:	da07      	bge.n	8002d38 <__sfputc_r+0x1c>
 8002d28:	6994      	ldr	r4, [r2, #24]
 8002d2a:	42a3      	cmp	r3, r4
 8002d2c:	db01      	blt.n	8002d32 <__sfputc_r+0x16>
 8002d2e:	290a      	cmp	r1, #10
 8002d30:	d102      	bne.n	8002d38 <__sfputc_r+0x1c>
 8002d32:	bc10      	pop	{r4}
 8002d34:	f000 bba6 	b.w	8003484 <__swbuf_r>
 8002d38:	6813      	ldr	r3, [r2, #0]
 8002d3a:	1c58      	adds	r0, r3, #1
 8002d3c:	6010      	str	r0, [r2, #0]
 8002d3e:	7019      	strb	r1, [r3, #0]
 8002d40:	4608      	mov	r0, r1
 8002d42:	bc10      	pop	{r4}
 8002d44:	4770      	bx	lr

08002d46 <__sfputs_r>:
 8002d46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d48:	4606      	mov	r6, r0
 8002d4a:	460f      	mov	r7, r1
 8002d4c:	4614      	mov	r4, r2
 8002d4e:	18d5      	adds	r5, r2, r3
 8002d50:	42ac      	cmp	r4, r5
 8002d52:	d101      	bne.n	8002d58 <__sfputs_r+0x12>
 8002d54:	2000      	movs	r0, #0
 8002d56:	e007      	b.n	8002d68 <__sfputs_r+0x22>
 8002d58:	463a      	mov	r2, r7
 8002d5a:	4630      	mov	r0, r6
 8002d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d60:	f7ff ffdc 	bl	8002d1c <__sfputc_r>
 8002d64:	1c43      	adds	r3, r0, #1
 8002d66:	d1f3      	bne.n	8002d50 <__sfputs_r+0xa>
 8002d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d6c <_vfiprintf_r>:
 8002d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d70:	460d      	mov	r5, r1
 8002d72:	4614      	mov	r4, r2
 8002d74:	4698      	mov	r8, r3
 8002d76:	4606      	mov	r6, r0
 8002d78:	b09d      	sub	sp, #116	; 0x74
 8002d7a:	b118      	cbz	r0, 8002d84 <_vfiprintf_r+0x18>
 8002d7c:	6a03      	ldr	r3, [r0, #32]
 8002d7e:	b90b      	cbnz	r3, 8002d84 <_vfiprintf_r+0x18>
 8002d80:	f7ff fdc8 	bl	8002914 <__sinit>
 8002d84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d86:	07d9      	lsls	r1, r3, #31
 8002d88:	d405      	bmi.n	8002d96 <_vfiprintf_r+0x2a>
 8002d8a:	89ab      	ldrh	r3, [r5, #12]
 8002d8c:	059a      	lsls	r2, r3, #22
 8002d8e:	d402      	bmi.n	8002d96 <_vfiprintf_r+0x2a>
 8002d90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d92:	f7ff fecc 	bl	8002b2e <__retarget_lock_acquire_recursive>
 8002d96:	89ab      	ldrh	r3, [r5, #12]
 8002d98:	071b      	lsls	r3, r3, #28
 8002d9a:	d501      	bpl.n	8002da0 <_vfiprintf_r+0x34>
 8002d9c:	692b      	ldr	r3, [r5, #16]
 8002d9e:	b99b      	cbnz	r3, 8002dc8 <_vfiprintf_r+0x5c>
 8002da0:	4629      	mov	r1, r5
 8002da2:	4630      	mov	r0, r6
 8002da4:	f000 fbac 	bl	8003500 <__swsetup_r>
 8002da8:	b170      	cbz	r0, 8002dc8 <_vfiprintf_r+0x5c>
 8002daa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002dac:	07dc      	lsls	r4, r3, #31
 8002dae:	d504      	bpl.n	8002dba <_vfiprintf_r+0x4e>
 8002db0:	f04f 30ff 	mov.w	r0, #4294967295
 8002db4:	b01d      	add	sp, #116	; 0x74
 8002db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dba:	89ab      	ldrh	r3, [r5, #12]
 8002dbc:	0598      	lsls	r0, r3, #22
 8002dbe:	d4f7      	bmi.n	8002db0 <_vfiprintf_r+0x44>
 8002dc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002dc2:	f7ff feb5 	bl	8002b30 <__retarget_lock_release_recursive>
 8002dc6:	e7f3      	b.n	8002db0 <_vfiprintf_r+0x44>
 8002dc8:	2300      	movs	r3, #0
 8002dca:	9309      	str	r3, [sp, #36]	; 0x24
 8002dcc:	2320      	movs	r3, #32
 8002dce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002dd2:	2330      	movs	r3, #48	; 0x30
 8002dd4:	f04f 0901 	mov.w	r9, #1
 8002dd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ddc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8002f8c <_vfiprintf_r+0x220>
 8002de0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002de4:	4623      	mov	r3, r4
 8002de6:	469a      	mov	sl, r3
 8002de8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002dec:	b10a      	cbz	r2, 8002df2 <_vfiprintf_r+0x86>
 8002dee:	2a25      	cmp	r2, #37	; 0x25
 8002df0:	d1f9      	bne.n	8002de6 <_vfiprintf_r+0x7a>
 8002df2:	ebba 0b04 	subs.w	fp, sl, r4
 8002df6:	d00b      	beq.n	8002e10 <_vfiprintf_r+0xa4>
 8002df8:	465b      	mov	r3, fp
 8002dfa:	4622      	mov	r2, r4
 8002dfc:	4629      	mov	r1, r5
 8002dfe:	4630      	mov	r0, r6
 8002e00:	f7ff ffa1 	bl	8002d46 <__sfputs_r>
 8002e04:	3001      	adds	r0, #1
 8002e06:	f000 80a9 	beq.w	8002f5c <_vfiprintf_r+0x1f0>
 8002e0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e0c:	445a      	add	r2, fp
 8002e0e:	9209      	str	r2, [sp, #36]	; 0x24
 8002e10:	f89a 3000 	ldrb.w	r3, [sl]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 80a1 	beq.w	8002f5c <_vfiprintf_r+0x1f0>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e24:	f10a 0a01 	add.w	sl, sl, #1
 8002e28:	9304      	str	r3, [sp, #16]
 8002e2a:	9307      	str	r3, [sp, #28]
 8002e2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e30:	931a      	str	r3, [sp, #104]	; 0x68
 8002e32:	4654      	mov	r4, sl
 8002e34:	2205      	movs	r2, #5
 8002e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e3a:	4854      	ldr	r0, [pc, #336]	; (8002f8c <_vfiprintf_r+0x220>)
 8002e3c:	f000 fbc8 	bl	80035d0 <memchr>
 8002e40:	9a04      	ldr	r2, [sp, #16]
 8002e42:	b9d8      	cbnz	r0, 8002e7c <_vfiprintf_r+0x110>
 8002e44:	06d1      	lsls	r1, r2, #27
 8002e46:	bf44      	itt	mi
 8002e48:	2320      	movmi	r3, #32
 8002e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e4e:	0713      	lsls	r3, r2, #28
 8002e50:	bf44      	itt	mi
 8002e52:	232b      	movmi	r3, #43	; 0x2b
 8002e54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e58:	f89a 3000 	ldrb.w	r3, [sl]
 8002e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e5e:	d015      	beq.n	8002e8c <_vfiprintf_r+0x120>
 8002e60:	4654      	mov	r4, sl
 8002e62:	2000      	movs	r0, #0
 8002e64:	f04f 0c0a 	mov.w	ip, #10
 8002e68:	9a07      	ldr	r2, [sp, #28]
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e70:	3b30      	subs	r3, #48	; 0x30
 8002e72:	2b09      	cmp	r3, #9
 8002e74:	d94d      	bls.n	8002f12 <_vfiprintf_r+0x1a6>
 8002e76:	b1b0      	cbz	r0, 8002ea6 <_vfiprintf_r+0x13a>
 8002e78:	9207      	str	r2, [sp, #28]
 8002e7a:	e014      	b.n	8002ea6 <_vfiprintf_r+0x13a>
 8002e7c:	eba0 0308 	sub.w	r3, r0, r8
 8002e80:	fa09 f303 	lsl.w	r3, r9, r3
 8002e84:	4313      	orrs	r3, r2
 8002e86:	46a2      	mov	sl, r4
 8002e88:	9304      	str	r3, [sp, #16]
 8002e8a:	e7d2      	b.n	8002e32 <_vfiprintf_r+0xc6>
 8002e8c:	9b03      	ldr	r3, [sp, #12]
 8002e8e:	1d19      	adds	r1, r3, #4
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	9103      	str	r1, [sp, #12]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bfbb      	ittet	lt
 8002e98:	425b      	neglt	r3, r3
 8002e9a:	f042 0202 	orrlt.w	r2, r2, #2
 8002e9e:	9307      	strge	r3, [sp, #28]
 8002ea0:	9307      	strlt	r3, [sp, #28]
 8002ea2:	bfb8      	it	lt
 8002ea4:	9204      	strlt	r2, [sp, #16]
 8002ea6:	7823      	ldrb	r3, [r4, #0]
 8002ea8:	2b2e      	cmp	r3, #46	; 0x2e
 8002eaa:	d10c      	bne.n	8002ec6 <_vfiprintf_r+0x15a>
 8002eac:	7863      	ldrb	r3, [r4, #1]
 8002eae:	2b2a      	cmp	r3, #42	; 0x2a
 8002eb0:	d134      	bne.n	8002f1c <_vfiprintf_r+0x1b0>
 8002eb2:	9b03      	ldr	r3, [sp, #12]
 8002eb4:	3402      	adds	r4, #2
 8002eb6:	1d1a      	adds	r2, r3, #4
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	9203      	str	r2, [sp, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bfb8      	it	lt
 8002ec0:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ec4:	9305      	str	r3, [sp, #20]
 8002ec6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002f90 <_vfiprintf_r+0x224>
 8002eca:	2203      	movs	r2, #3
 8002ecc:	4650      	mov	r0, sl
 8002ece:	7821      	ldrb	r1, [r4, #0]
 8002ed0:	f000 fb7e 	bl	80035d0 <memchr>
 8002ed4:	b138      	cbz	r0, 8002ee6 <_vfiprintf_r+0x17a>
 8002ed6:	2240      	movs	r2, #64	; 0x40
 8002ed8:	9b04      	ldr	r3, [sp, #16]
 8002eda:	eba0 000a 	sub.w	r0, r0, sl
 8002ede:	4082      	lsls	r2, r0
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	3401      	adds	r4, #1
 8002ee4:	9304      	str	r3, [sp, #16]
 8002ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002eea:	2206      	movs	r2, #6
 8002eec:	4829      	ldr	r0, [pc, #164]	; (8002f94 <_vfiprintf_r+0x228>)
 8002eee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ef2:	f000 fb6d 	bl	80035d0 <memchr>
 8002ef6:	2800      	cmp	r0, #0
 8002ef8:	d03f      	beq.n	8002f7a <_vfiprintf_r+0x20e>
 8002efa:	4b27      	ldr	r3, [pc, #156]	; (8002f98 <_vfiprintf_r+0x22c>)
 8002efc:	bb1b      	cbnz	r3, 8002f46 <_vfiprintf_r+0x1da>
 8002efe:	9b03      	ldr	r3, [sp, #12]
 8002f00:	3307      	adds	r3, #7
 8002f02:	f023 0307 	bic.w	r3, r3, #7
 8002f06:	3308      	adds	r3, #8
 8002f08:	9303      	str	r3, [sp, #12]
 8002f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f0c:	443b      	add	r3, r7
 8002f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8002f10:	e768      	b.n	8002de4 <_vfiprintf_r+0x78>
 8002f12:	460c      	mov	r4, r1
 8002f14:	2001      	movs	r0, #1
 8002f16:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f1a:	e7a6      	b.n	8002e6a <_vfiprintf_r+0xfe>
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f04f 0c0a 	mov.w	ip, #10
 8002f22:	4619      	mov	r1, r3
 8002f24:	3401      	adds	r4, #1
 8002f26:	9305      	str	r3, [sp, #20]
 8002f28:	4620      	mov	r0, r4
 8002f2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f2e:	3a30      	subs	r2, #48	; 0x30
 8002f30:	2a09      	cmp	r2, #9
 8002f32:	d903      	bls.n	8002f3c <_vfiprintf_r+0x1d0>
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0c6      	beq.n	8002ec6 <_vfiprintf_r+0x15a>
 8002f38:	9105      	str	r1, [sp, #20]
 8002f3a:	e7c4      	b.n	8002ec6 <_vfiprintf_r+0x15a>
 8002f3c:	4604      	mov	r4, r0
 8002f3e:	2301      	movs	r3, #1
 8002f40:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f44:	e7f0      	b.n	8002f28 <_vfiprintf_r+0x1bc>
 8002f46:	ab03      	add	r3, sp, #12
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	462a      	mov	r2, r5
 8002f4c:	4630      	mov	r0, r6
 8002f4e:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <_vfiprintf_r+0x230>)
 8002f50:	a904      	add	r1, sp, #16
 8002f52:	f3af 8000 	nop.w
 8002f56:	4607      	mov	r7, r0
 8002f58:	1c78      	adds	r0, r7, #1
 8002f5a:	d1d6      	bne.n	8002f0a <_vfiprintf_r+0x19e>
 8002f5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f5e:	07d9      	lsls	r1, r3, #31
 8002f60:	d405      	bmi.n	8002f6e <_vfiprintf_r+0x202>
 8002f62:	89ab      	ldrh	r3, [r5, #12]
 8002f64:	059a      	lsls	r2, r3, #22
 8002f66:	d402      	bmi.n	8002f6e <_vfiprintf_r+0x202>
 8002f68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f6a:	f7ff fde1 	bl	8002b30 <__retarget_lock_release_recursive>
 8002f6e:	89ab      	ldrh	r3, [r5, #12]
 8002f70:	065b      	lsls	r3, r3, #25
 8002f72:	f53f af1d 	bmi.w	8002db0 <_vfiprintf_r+0x44>
 8002f76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f78:	e71c      	b.n	8002db4 <_vfiprintf_r+0x48>
 8002f7a:	ab03      	add	r3, sp, #12
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	462a      	mov	r2, r5
 8002f80:	4630      	mov	r0, r6
 8002f82:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <_vfiprintf_r+0x230>)
 8002f84:	a904      	add	r1, sp, #16
 8002f86:	f000 f87d 	bl	8003084 <_printf_i>
 8002f8a:	e7e4      	b.n	8002f56 <_vfiprintf_r+0x1ea>
 8002f8c:	0800373a 	.word	0x0800373a
 8002f90:	08003740 	.word	0x08003740
 8002f94:	08003744 	.word	0x08003744
 8002f98:	00000000 	.word	0x00000000
 8002f9c:	08002d47 	.word	0x08002d47

08002fa0 <_printf_common>:
 8002fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fa4:	4616      	mov	r6, r2
 8002fa6:	4699      	mov	r9, r3
 8002fa8:	688a      	ldr	r2, [r1, #8]
 8002faa:	690b      	ldr	r3, [r1, #16]
 8002fac:	4607      	mov	r7, r0
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	bfb8      	it	lt
 8002fb2:	4613      	movlt	r3, r2
 8002fb4:	6033      	str	r3, [r6, #0]
 8002fb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fba:	460c      	mov	r4, r1
 8002fbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fc0:	b10a      	cbz	r2, 8002fc6 <_printf_common+0x26>
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	6033      	str	r3, [r6, #0]
 8002fc6:	6823      	ldr	r3, [r4, #0]
 8002fc8:	0699      	lsls	r1, r3, #26
 8002fca:	bf42      	ittt	mi
 8002fcc:	6833      	ldrmi	r3, [r6, #0]
 8002fce:	3302      	addmi	r3, #2
 8002fd0:	6033      	strmi	r3, [r6, #0]
 8002fd2:	6825      	ldr	r5, [r4, #0]
 8002fd4:	f015 0506 	ands.w	r5, r5, #6
 8002fd8:	d106      	bne.n	8002fe8 <_printf_common+0x48>
 8002fda:	f104 0a19 	add.w	sl, r4, #25
 8002fde:	68e3      	ldr	r3, [r4, #12]
 8002fe0:	6832      	ldr	r2, [r6, #0]
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	42ab      	cmp	r3, r5
 8002fe6:	dc2b      	bgt.n	8003040 <_printf_common+0xa0>
 8002fe8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002fec:	1e13      	subs	r3, r2, #0
 8002fee:	6822      	ldr	r2, [r4, #0]
 8002ff0:	bf18      	it	ne
 8002ff2:	2301      	movne	r3, #1
 8002ff4:	0692      	lsls	r2, r2, #26
 8002ff6:	d430      	bmi.n	800305a <_printf_common+0xba>
 8002ff8:	4649      	mov	r1, r9
 8002ffa:	4638      	mov	r0, r7
 8002ffc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003000:	47c0      	blx	r8
 8003002:	3001      	adds	r0, #1
 8003004:	d023      	beq.n	800304e <_printf_common+0xae>
 8003006:	6823      	ldr	r3, [r4, #0]
 8003008:	6922      	ldr	r2, [r4, #16]
 800300a:	f003 0306 	and.w	r3, r3, #6
 800300e:	2b04      	cmp	r3, #4
 8003010:	bf14      	ite	ne
 8003012:	2500      	movne	r5, #0
 8003014:	6833      	ldreq	r3, [r6, #0]
 8003016:	f04f 0600 	mov.w	r6, #0
 800301a:	bf08      	it	eq
 800301c:	68e5      	ldreq	r5, [r4, #12]
 800301e:	f104 041a 	add.w	r4, r4, #26
 8003022:	bf08      	it	eq
 8003024:	1aed      	subeq	r5, r5, r3
 8003026:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800302a:	bf08      	it	eq
 800302c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003030:	4293      	cmp	r3, r2
 8003032:	bfc4      	itt	gt
 8003034:	1a9b      	subgt	r3, r3, r2
 8003036:	18ed      	addgt	r5, r5, r3
 8003038:	42b5      	cmp	r5, r6
 800303a:	d11a      	bne.n	8003072 <_printf_common+0xd2>
 800303c:	2000      	movs	r0, #0
 800303e:	e008      	b.n	8003052 <_printf_common+0xb2>
 8003040:	2301      	movs	r3, #1
 8003042:	4652      	mov	r2, sl
 8003044:	4649      	mov	r1, r9
 8003046:	4638      	mov	r0, r7
 8003048:	47c0      	blx	r8
 800304a:	3001      	adds	r0, #1
 800304c:	d103      	bne.n	8003056 <_printf_common+0xb6>
 800304e:	f04f 30ff 	mov.w	r0, #4294967295
 8003052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003056:	3501      	adds	r5, #1
 8003058:	e7c1      	b.n	8002fde <_printf_common+0x3e>
 800305a:	2030      	movs	r0, #48	; 0x30
 800305c:	18e1      	adds	r1, r4, r3
 800305e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003068:	4422      	add	r2, r4
 800306a:	3302      	adds	r3, #2
 800306c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003070:	e7c2      	b.n	8002ff8 <_printf_common+0x58>
 8003072:	2301      	movs	r3, #1
 8003074:	4622      	mov	r2, r4
 8003076:	4649      	mov	r1, r9
 8003078:	4638      	mov	r0, r7
 800307a:	47c0      	blx	r8
 800307c:	3001      	adds	r0, #1
 800307e:	d0e6      	beq.n	800304e <_printf_common+0xae>
 8003080:	3601      	adds	r6, #1
 8003082:	e7d9      	b.n	8003038 <_printf_common+0x98>

08003084 <_printf_i>:
 8003084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003088:	7e0f      	ldrb	r7, [r1, #24]
 800308a:	4691      	mov	r9, r2
 800308c:	2f78      	cmp	r7, #120	; 0x78
 800308e:	4680      	mov	r8, r0
 8003090:	460c      	mov	r4, r1
 8003092:	469a      	mov	sl, r3
 8003094:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003096:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800309a:	d807      	bhi.n	80030ac <_printf_i+0x28>
 800309c:	2f62      	cmp	r7, #98	; 0x62
 800309e:	d80a      	bhi.n	80030b6 <_printf_i+0x32>
 80030a0:	2f00      	cmp	r7, #0
 80030a2:	f000 80d5 	beq.w	8003250 <_printf_i+0x1cc>
 80030a6:	2f58      	cmp	r7, #88	; 0x58
 80030a8:	f000 80c1 	beq.w	800322e <_printf_i+0x1aa>
 80030ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80030b4:	e03a      	b.n	800312c <_printf_i+0xa8>
 80030b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80030ba:	2b15      	cmp	r3, #21
 80030bc:	d8f6      	bhi.n	80030ac <_printf_i+0x28>
 80030be:	a101      	add	r1, pc, #4	; (adr r1, 80030c4 <_printf_i+0x40>)
 80030c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030c4:	0800311d 	.word	0x0800311d
 80030c8:	08003131 	.word	0x08003131
 80030cc:	080030ad 	.word	0x080030ad
 80030d0:	080030ad 	.word	0x080030ad
 80030d4:	080030ad 	.word	0x080030ad
 80030d8:	080030ad 	.word	0x080030ad
 80030dc:	08003131 	.word	0x08003131
 80030e0:	080030ad 	.word	0x080030ad
 80030e4:	080030ad 	.word	0x080030ad
 80030e8:	080030ad 	.word	0x080030ad
 80030ec:	080030ad 	.word	0x080030ad
 80030f0:	08003237 	.word	0x08003237
 80030f4:	0800315d 	.word	0x0800315d
 80030f8:	080031f1 	.word	0x080031f1
 80030fc:	080030ad 	.word	0x080030ad
 8003100:	080030ad 	.word	0x080030ad
 8003104:	08003259 	.word	0x08003259
 8003108:	080030ad 	.word	0x080030ad
 800310c:	0800315d 	.word	0x0800315d
 8003110:	080030ad 	.word	0x080030ad
 8003114:	080030ad 	.word	0x080030ad
 8003118:	080031f9 	.word	0x080031f9
 800311c:	682b      	ldr	r3, [r5, #0]
 800311e:	1d1a      	adds	r2, r3, #4
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	602a      	str	r2, [r5, #0]
 8003124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003128:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800312c:	2301      	movs	r3, #1
 800312e:	e0a0      	b.n	8003272 <_printf_i+0x1ee>
 8003130:	6820      	ldr	r0, [r4, #0]
 8003132:	682b      	ldr	r3, [r5, #0]
 8003134:	0607      	lsls	r7, r0, #24
 8003136:	f103 0104 	add.w	r1, r3, #4
 800313a:	6029      	str	r1, [r5, #0]
 800313c:	d501      	bpl.n	8003142 <_printf_i+0xbe>
 800313e:	681e      	ldr	r6, [r3, #0]
 8003140:	e003      	b.n	800314a <_printf_i+0xc6>
 8003142:	0646      	lsls	r6, r0, #25
 8003144:	d5fb      	bpl.n	800313e <_printf_i+0xba>
 8003146:	f9b3 6000 	ldrsh.w	r6, [r3]
 800314a:	2e00      	cmp	r6, #0
 800314c:	da03      	bge.n	8003156 <_printf_i+0xd2>
 800314e:	232d      	movs	r3, #45	; 0x2d
 8003150:	4276      	negs	r6, r6
 8003152:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003156:	230a      	movs	r3, #10
 8003158:	4859      	ldr	r0, [pc, #356]	; (80032c0 <_printf_i+0x23c>)
 800315a:	e012      	b.n	8003182 <_printf_i+0xfe>
 800315c:	682b      	ldr	r3, [r5, #0]
 800315e:	6820      	ldr	r0, [r4, #0]
 8003160:	1d19      	adds	r1, r3, #4
 8003162:	6029      	str	r1, [r5, #0]
 8003164:	0605      	lsls	r5, r0, #24
 8003166:	d501      	bpl.n	800316c <_printf_i+0xe8>
 8003168:	681e      	ldr	r6, [r3, #0]
 800316a:	e002      	b.n	8003172 <_printf_i+0xee>
 800316c:	0641      	lsls	r1, r0, #25
 800316e:	d5fb      	bpl.n	8003168 <_printf_i+0xe4>
 8003170:	881e      	ldrh	r6, [r3, #0]
 8003172:	2f6f      	cmp	r7, #111	; 0x6f
 8003174:	bf0c      	ite	eq
 8003176:	2308      	moveq	r3, #8
 8003178:	230a      	movne	r3, #10
 800317a:	4851      	ldr	r0, [pc, #324]	; (80032c0 <_printf_i+0x23c>)
 800317c:	2100      	movs	r1, #0
 800317e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003182:	6865      	ldr	r5, [r4, #4]
 8003184:	2d00      	cmp	r5, #0
 8003186:	bfa8      	it	ge
 8003188:	6821      	ldrge	r1, [r4, #0]
 800318a:	60a5      	str	r5, [r4, #8]
 800318c:	bfa4      	itt	ge
 800318e:	f021 0104 	bicge.w	r1, r1, #4
 8003192:	6021      	strge	r1, [r4, #0]
 8003194:	b90e      	cbnz	r6, 800319a <_printf_i+0x116>
 8003196:	2d00      	cmp	r5, #0
 8003198:	d04b      	beq.n	8003232 <_printf_i+0x1ae>
 800319a:	4615      	mov	r5, r2
 800319c:	fbb6 f1f3 	udiv	r1, r6, r3
 80031a0:	fb03 6711 	mls	r7, r3, r1, r6
 80031a4:	5dc7      	ldrb	r7, [r0, r7]
 80031a6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80031aa:	4637      	mov	r7, r6
 80031ac:	42bb      	cmp	r3, r7
 80031ae:	460e      	mov	r6, r1
 80031b0:	d9f4      	bls.n	800319c <_printf_i+0x118>
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d10b      	bne.n	80031ce <_printf_i+0x14a>
 80031b6:	6823      	ldr	r3, [r4, #0]
 80031b8:	07de      	lsls	r6, r3, #31
 80031ba:	d508      	bpl.n	80031ce <_printf_i+0x14a>
 80031bc:	6923      	ldr	r3, [r4, #16]
 80031be:	6861      	ldr	r1, [r4, #4]
 80031c0:	4299      	cmp	r1, r3
 80031c2:	bfde      	ittt	le
 80031c4:	2330      	movle	r3, #48	; 0x30
 80031c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80031ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80031ce:	1b52      	subs	r2, r2, r5
 80031d0:	6122      	str	r2, [r4, #16]
 80031d2:	464b      	mov	r3, r9
 80031d4:	4621      	mov	r1, r4
 80031d6:	4640      	mov	r0, r8
 80031d8:	f8cd a000 	str.w	sl, [sp]
 80031dc:	aa03      	add	r2, sp, #12
 80031de:	f7ff fedf 	bl	8002fa0 <_printf_common>
 80031e2:	3001      	adds	r0, #1
 80031e4:	d14a      	bne.n	800327c <_printf_i+0x1f8>
 80031e6:	f04f 30ff 	mov.w	r0, #4294967295
 80031ea:	b004      	add	sp, #16
 80031ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	f043 0320 	orr.w	r3, r3, #32
 80031f6:	6023      	str	r3, [r4, #0]
 80031f8:	2778      	movs	r7, #120	; 0x78
 80031fa:	4832      	ldr	r0, [pc, #200]	; (80032c4 <_printf_i+0x240>)
 80031fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003200:	6823      	ldr	r3, [r4, #0]
 8003202:	6829      	ldr	r1, [r5, #0]
 8003204:	061f      	lsls	r7, r3, #24
 8003206:	f851 6b04 	ldr.w	r6, [r1], #4
 800320a:	d402      	bmi.n	8003212 <_printf_i+0x18e>
 800320c:	065f      	lsls	r7, r3, #25
 800320e:	bf48      	it	mi
 8003210:	b2b6      	uxthmi	r6, r6
 8003212:	07df      	lsls	r7, r3, #31
 8003214:	bf48      	it	mi
 8003216:	f043 0320 	orrmi.w	r3, r3, #32
 800321a:	6029      	str	r1, [r5, #0]
 800321c:	bf48      	it	mi
 800321e:	6023      	strmi	r3, [r4, #0]
 8003220:	b91e      	cbnz	r6, 800322a <_printf_i+0x1a6>
 8003222:	6823      	ldr	r3, [r4, #0]
 8003224:	f023 0320 	bic.w	r3, r3, #32
 8003228:	6023      	str	r3, [r4, #0]
 800322a:	2310      	movs	r3, #16
 800322c:	e7a6      	b.n	800317c <_printf_i+0xf8>
 800322e:	4824      	ldr	r0, [pc, #144]	; (80032c0 <_printf_i+0x23c>)
 8003230:	e7e4      	b.n	80031fc <_printf_i+0x178>
 8003232:	4615      	mov	r5, r2
 8003234:	e7bd      	b.n	80031b2 <_printf_i+0x12e>
 8003236:	682b      	ldr	r3, [r5, #0]
 8003238:	6826      	ldr	r6, [r4, #0]
 800323a:	1d18      	adds	r0, r3, #4
 800323c:	6961      	ldr	r1, [r4, #20]
 800323e:	6028      	str	r0, [r5, #0]
 8003240:	0635      	lsls	r5, r6, #24
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	d501      	bpl.n	800324a <_printf_i+0x1c6>
 8003246:	6019      	str	r1, [r3, #0]
 8003248:	e002      	b.n	8003250 <_printf_i+0x1cc>
 800324a:	0670      	lsls	r0, r6, #25
 800324c:	d5fb      	bpl.n	8003246 <_printf_i+0x1c2>
 800324e:	8019      	strh	r1, [r3, #0]
 8003250:	2300      	movs	r3, #0
 8003252:	4615      	mov	r5, r2
 8003254:	6123      	str	r3, [r4, #16]
 8003256:	e7bc      	b.n	80031d2 <_printf_i+0x14e>
 8003258:	682b      	ldr	r3, [r5, #0]
 800325a:	2100      	movs	r1, #0
 800325c:	1d1a      	adds	r2, r3, #4
 800325e:	602a      	str	r2, [r5, #0]
 8003260:	681d      	ldr	r5, [r3, #0]
 8003262:	6862      	ldr	r2, [r4, #4]
 8003264:	4628      	mov	r0, r5
 8003266:	f000 f9b3 	bl	80035d0 <memchr>
 800326a:	b108      	cbz	r0, 8003270 <_printf_i+0x1ec>
 800326c:	1b40      	subs	r0, r0, r5
 800326e:	6060      	str	r0, [r4, #4]
 8003270:	6863      	ldr	r3, [r4, #4]
 8003272:	6123      	str	r3, [r4, #16]
 8003274:	2300      	movs	r3, #0
 8003276:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800327a:	e7aa      	b.n	80031d2 <_printf_i+0x14e>
 800327c:	462a      	mov	r2, r5
 800327e:	4649      	mov	r1, r9
 8003280:	4640      	mov	r0, r8
 8003282:	6923      	ldr	r3, [r4, #16]
 8003284:	47d0      	blx	sl
 8003286:	3001      	adds	r0, #1
 8003288:	d0ad      	beq.n	80031e6 <_printf_i+0x162>
 800328a:	6823      	ldr	r3, [r4, #0]
 800328c:	079b      	lsls	r3, r3, #30
 800328e:	d413      	bmi.n	80032b8 <_printf_i+0x234>
 8003290:	68e0      	ldr	r0, [r4, #12]
 8003292:	9b03      	ldr	r3, [sp, #12]
 8003294:	4298      	cmp	r0, r3
 8003296:	bfb8      	it	lt
 8003298:	4618      	movlt	r0, r3
 800329a:	e7a6      	b.n	80031ea <_printf_i+0x166>
 800329c:	2301      	movs	r3, #1
 800329e:	4632      	mov	r2, r6
 80032a0:	4649      	mov	r1, r9
 80032a2:	4640      	mov	r0, r8
 80032a4:	47d0      	blx	sl
 80032a6:	3001      	adds	r0, #1
 80032a8:	d09d      	beq.n	80031e6 <_printf_i+0x162>
 80032aa:	3501      	adds	r5, #1
 80032ac:	68e3      	ldr	r3, [r4, #12]
 80032ae:	9903      	ldr	r1, [sp, #12]
 80032b0:	1a5b      	subs	r3, r3, r1
 80032b2:	42ab      	cmp	r3, r5
 80032b4:	dcf2      	bgt.n	800329c <_printf_i+0x218>
 80032b6:	e7eb      	b.n	8003290 <_printf_i+0x20c>
 80032b8:	2500      	movs	r5, #0
 80032ba:	f104 0619 	add.w	r6, r4, #25
 80032be:	e7f5      	b.n	80032ac <_printf_i+0x228>
 80032c0:	0800374b 	.word	0x0800374b
 80032c4:	0800375c 	.word	0x0800375c

080032c8 <__sflush_r>:
 80032c8:	898a      	ldrh	r2, [r1, #12]
 80032ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032cc:	4605      	mov	r5, r0
 80032ce:	0710      	lsls	r0, r2, #28
 80032d0:	460c      	mov	r4, r1
 80032d2:	d457      	bmi.n	8003384 <__sflush_r+0xbc>
 80032d4:	684b      	ldr	r3, [r1, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	dc04      	bgt.n	80032e4 <__sflush_r+0x1c>
 80032da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80032dc:	2b00      	cmp	r3, #0
 80032de:	dc01      	bgt.n	80032e4 <__sflush_r+0x1c>
 80032e0:	2000      	movs	r0, #0
 80032e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032e6:	2e00      	cmp	r6, #0
 80032e8:	d0fa      	beq.n	80032e0 <__sflush_r+0x18>
 80032ea:	2300      	movs	r3, #0
 80032ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80032f0:	682f      	ldr	r7, [r5, #0]
 80032f2:	6a21      	ldr	r1, [r4, #32]
 80032f4:	602b      	str	r3, [r5, #0]
 80032f6:	d032      	beq.n	800335e <__sflush_r+0x96>
 80032f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80032fa:	89a3      	ldrh	r3, [r4, #12]
 80032fc:	075a      	lsls	r2, r3, #29
 80032fe:	d505      	bpl.n	800330c <__sflush_r+0x44>
 8003300:	6863      	ldr	r3, [r4, #4]
 8003302:	1ac0      	subs	r0, r0, r3
 8003304:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003306:	b10b      	cbz	r3, 800330c <__sflush_r+0x44>
 8003308:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800330a:	1ac0      	subs	r0, r0, r3
 800330c:	2300      	movs	r3, #0
 800330e:	4602      	mov	r2, r0
 8003310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003312:	4628      	mov	r0, r5
 8003314:	6a21      	ldr	r1, [r4, #32]
 8003316:	47b0      	blx	r6
 8003318:	1c43      	adds	r3, r0, #1
 800331a:	89a3      	ldrh	r3, [r4, #12]
 800331c:	d106      	bne.n	800332c <__sflush_r+0x64>
 800331e:	6829      	ldr	r1, [r5, #0]
 8003320:	291d      	cmp	r1, #29
 8003322:	d82b      	bhi.n	800337c <__sflush_r+0xb4>
 8003324:	4a28      	ldr	r2, [pc, #160]	; (80033c8 <__sflush_r+0x100>)
 8003326:	410a      	asrs	r2, r1
 8003328:	07d6      	lsls	r6, r2, #31
 800332a:	d427      	bmi.n	800337c <__sflush_r+0xb4>
 800332c:	2200      	movs	r2, #0
 800332e:	6062      	str	r2, [r4, #4]
 8003330:	6922      	ldr	r2, [r4, #16]
 8003332:	04d9      	lsls	r1, r3, #19
 8003334:	6022      	str	r2, [r4, #0]
 8003336:	d504      	bpl.n	8003342 <__sflush_r+0x7a>
 8003338:	1c42      	adds	r2, r0, #1
 800333a:	d101      	bne.n	8003340 <__sflush_r+0x78>
 800333c:	682b      	ldr	r3, [r5, #0]
 800333e:	b903      	cbnz	r3, 8003342 <__sflush_r+0x7a>
 8003340:	6560      	str	r0, [r4, #84]	; 0x54
 8003342:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003344:	602f      	str	r7, [r5, #0]
 8003346:	2900      	cmp	r1, #0
 8003348:	d0ca      	beq.n	80032e0 <__sflush_r+0x18>
 800334a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800334e:	4299      	cmp	r1, r3
 8003350:	d002      	beq.n	8003358 <__sflush_r+0x90>
 8003352:	4628      	mov	r0, r5
 8003354:	f7ff fbee 	bl	8002b34 <_free_r>
 8003358:	2000      	movs	r0, #0
 800335a:	6360      	str	r0, [r4, #52]	; 0x34
 800335c:	e7c1      	b.n	80032e2 <__sflush_r+0x1a>
 800335e:	2301      	movs	r3, #1
 8003360:	4628      	mov	r0, r5
 8003362:	47b0      	blx	r6
 8003364:	1c41      	adds	r1, r0, #1
 8003366:	d1c8      	bne.n	80032fa <__sflush_r+0x32>
 8003368:	682b      	ldr	r3, [r5, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0c5      	beq.n	80032fa <__sflush_r+0x32>
 800336e:	2b1d      	cmp	r3, #29
 8003370:	d001      	beq.n	8003376 <__sflush_r+0xae>
 8003372:	2b16      	cmp	r3, #22
 8003374:	d101      	bne.n	800337a <__sflush_r+0xb2>
 8003376:	602f      	str	r7, [r5, #0]
 8003378:	e7b2      	b.n	80032e0 <__sflush_r+0x18>
 800337a:	89a3      	ldrh	r3, [r4, #12]
 800337c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003380:	81a3      	strh	r3, [r4, #12]
 8003382:	e7ae      	b.n	80032e2 <__sflush_r+0x1a>
 8003384:	690f      	ldr	r7, [r1, #16]
 8003386:	2f00      	cmp	r7, #0
 8003388:	d0aa      	beq.n	80032e0 <__sflush_r+0x18>
 800338a:	0793      	lsls	r3, r2, #30
 800338c:	bf18      	it	ne
 800338e:	2300      	movne	r3, #0
 8003390:	680e      	ldr	r6, [r1, #0]
 8003392:	bf08      	it	eq
 8003394:	694b      	ldreq	r3, [r1, #20]
 8003396:	1bf6      	subs	r6, r6, r7
 8003398:	600f      	str	r7, [r1, #0]
 800339a:	608b      	str	r3, [r1, #8]
 800339c:	2e00      	cmp	r6, #0
 800339e:	dd9f      	ble.n	80032e0 <__sflush_r+0x18>
 80033a0:	4633      	mov	r3, r6
 80033a2:	463a      	mov	r2, r7
 80033a4:	4628      	mov	r0, r5
 80033a6:	6a21      	ldr	r1, [r4, #32]
 80033a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80033ac:	47e0      	blx	ip
 80033ae:	2800      	cmp	r0, #0
 80033b0:	dc06      	bgt.n	80033c0 <__sflush_r+0xf8>
 80033b2:	89a3      	ldrh	r3, [r4, #12]
 80033b4:	f04f 30ff 	mov.w	r0, #4294967295
 80033b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033bc:	81a3      	strh	r3, [r4, #12]
 80033be:	e790      	b.n	80032e2 <__sflush_r+0x1a>
 80033c0:	4407      	add	r7, r0
 80033c2:	1a36      	subs	r6, r6, r0
 80033c4:	e7ea      	b.n	800339c <__sflush_r+0xd4>
 80033c6:	bf00      	nop
 80033c8:	dfbffffe 	.word	0xdfbffffe

080033cc <_fflush_r>:
 80033cc:	b538      	push	{r3, r4, r5, lr}
 80033ce:	690b      	ldr	r3, [r1, #16]
 80033d0:	4605      	mov	r5, r0
 80033d2:	460c      	mov	r4, r1
 80033d4:	b913      	cbnz	r3, 80033dc <_fflush_r+0x10>
 80033d6:	2500      	movs	r5, #0
 80033d8:	4628      	mov	r0, r5
 80033da:	bd38      	pop	{r3, r4, r5, pc}
 80033dc:	b118      	cbz	r0, 80033e6 <_fflush_r+0x1a>
 80033de:	6a03      	ldr	r3, [r0, #32]
 80033e0:	b90b      	cbnz	r3, 80033e6 <_fflush_r+0x1a>
 80033e2:	f7ff fa97 	bl	8002914 <__sinit>
 80033e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f3      	beq.n	80033d6 <_fflush_r+0xa>
 80033ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80033f0:	07d0      	lsls	r0, r2, #31
 80033f2:	d404      	bmi.n	80033fe <_fflush_r+0x32>
 80033f4:	0599      	lsls	r1, r3, #22
 80033f6:	d402      	bmi.n	80033fe <_fflush_r+0x32>
 80033f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033fa:	f7ff fb98 	bl	8002b2e <__retarget_lock_acquire_recursive>
 80033fe:	4628      	mov	r0, r5
 8003400:	4621      	mov	r1, r4
 8003402:	f7ff ff61 	bl	80032c8 <__sflush_r>
 8003406:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003408:	4605      	mov	r5, r0
 800340a:	07da      	lsls	r2, r3, #31
 800340c:	d4e4      	bmi.n	80033d8 <_fflush_r+0xc>
 800340e:	89a3      	ldrh	r3, [r4, #12]
 8003410:	059b      	lsls	r3, r3, #22
 8003412:	d4e1      	bmi.n	80033d8 <_fflush_r+0xc>
 8003414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003416:	f7ff fb8b 	bl	8002b30 <__retarget_lock_release_recursive>
 800341a:	e7dd      	b.n	80033d8 <_fflush_r+0xc>

0800341c <_putc_r>:
 800341c:	b570      	push	{r4, r5, r6, lr}
 800341e:	460d      	mov	r5, r1
 8003420:	4614      	mov	r4, r2
 8003422:	4606      	mov	r6, r0
 8003424:	b118      	cbz	r0, 800342e <_putc_r+0x12>
 8003426:	6a03      	ldr	r3, [r0, #32]
 8003428:	b90b      	cbnz	r3, 800342e <_putc_r+0x12>
 800342a:	f7ff fa73 	bl	8002914 <__sinit>
 800342e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003430:	07d8      	lsls	r0, r3, #31
 8003432:	d405      	bmi.n	8003440 <_putc_r+0x24>
 8003434:	89a3      	ldrh	r3, [r4, #12]
 8003436:	0599      	lsls	r1, r3, #22
 8003438:	d402      	bmi.n	8003440 <_putc_r+0x24>
 800343a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800343c:	f7ff fb77 	bl	8002b2e <__retarget_lock_acquire_recursive>
 8003440:	68a3      	ldr	r3, [r4, #8]
 8003442:	3b01      	subs	r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	60a3      	str	r3, [r4, #8]
 8003448:	da05      	bge.n	8003456 <_putc_r+0x3a>
 800344a:	69a2      	ldr	r2, [r4, #24]
 800344c:	4293      	cmp	r3, r2
 800344e:	db12      	blt.n	8003476 <_putc_r+0x5a>
 8003450:	b2eb      	uxtb	r3, r5
 8003452:	2b0a      	cmp	r3, #10
 8003454:	d00f      	beq.n	8003476 <_putc_r+0x5a>
 8003456:	6823      	ldr	r3, [r4, #0]
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	6022      	str	r2, [r4, #0]
 800345c:	701d      	strb	r5, [r3, #0]
 800345e:	b2ed      	uxtb	r5, r5
 8003460:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003462:	07da      	lsls	r2, r3, #31
 8003464:	d405      	bmi.n	8003472 <_putc_r+0x56>
 8003466:	89a3      	ldrh	r3, [r4, #12]
 8003468:	059b      	lsls	r3, r3, #22
 800346a:	d402      	bmi.n	8003472 <_putc_r+0x56>
 800346c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800346e:	f7ff fb5f 	bl	8002b30 <__retarget_lock_release_recursive>
 8003472:	4628      	mov	r0, r5
 8003474:	bd70      	pop	{r4, r5, r6, pc}
 8003476:	4629      	mov	r1, r5
 8003478:	4622      	mov	r2, r4
 800347a:	4630      	mov	r0, r6
 800347c:	f000 f802 	bl	8003484 <__swbuf_r>
 8003480:	4605      	mov	r5, r0
 8003482:	e7ed      	b.n	8003460 <_putc_r+0x44>

08003484 <__swbuf_r>:
 8003484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003486:	460e      	mov	r6, r1
 8003488:	4614      	mov	r4, r2
 800348a:	4605      	mov	r5, r0
 800348c:	b118      	cbz	r0, 8003496 <__swbuf_r+0x12>
 800348e:	6a03      	ldr	r3, [r0, #32]
 8003490:	b90b      	cbnz	r3, 8003496 <__swbuf_r+0x12>
 8003492:	f7ff fa3f 	bl	8002914 <__sinit>
 8003496:	69a3      	ldr	r3, [r4, #24]
 8003498:	60a3      	str	r3, [r4, #8]
 800349a:	89a3      	ldrh	r3, [r4, #12]
 800349c:	071a      	lsls	r2, r3, #28
 800349e:	d525      	bpl.n	80034ec <__swbuf_r+0x68>
 80034a0:	6923      	ldr	r3, [r4, #16]
 80034a2:	b31b      	cbz	r3, 80034ec <__swbuf_r+0x68>
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	6922      	ldr	r2, [r4, #16]
 80034a8:	b2f6      	uxtb	r6, r6
 80034aa:	1a98      	subs	r0, r3, r2
 80034ac:	6963      	ldr	r3, [r4, #20]
 80034ae:	4637      	mov	r7, r6
 80034b0:	4283      	cmp	r3, r0
 80034b2:	dc04      	bgt.n	80034be <__swbuf_r+0x3a>
 80034b4:	4621      	mov	r1, r4
 80034b6:	4628      	mov	r0, r5
 80034b8:	f7ff ff88 	bl	80033cc <_fflush_r>
 80034bc:	b9e0      	cbnz	r0, 80034f8 <__swbuf_r+0x74>
 80034be:	68a3      	ldr	r3, [r4, #8]
 80034c0:	3b01      	subs	r3, #1
 80034c2:	60a3      	str	r3, [r4, #8]
 80034c4:	6823      	ldr	r3, [r4, #0]
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	6022      	str	r2, [r4, #0]
 80034ca:	701e      	strb	r6, [r3, #0]
 80034cc:	6962      	ldr	r2, [r4, #20]
 80034ce:	1c43      	adds	r3, r0, #1
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d004      	beq.n	80034de <__swbuf_r+0x5a>
 80034d4:	89a3      	ldrh	r3, [r4, #12]
 80034d6:	07db      	lsls	r3, r3, #31
 80034d8:	d506      	bpl.n	80034e8 <__swbuf_r+0x64>
 80034da:	2e0a      	cmp	r6, #10
 80034dc:	d104      	bne.n	80034e8 <__swbuf_r+0x64>
 80034de:	4621      	mov	r1, r4
 80034e0:	4628      	mov	r0, r5
 80034e2:	f7ff ff73 	bl	80033cc <_fflush_r>
 80034e6:	b938      	cbnz	r0, 80034f8 <__swbuf_r+0x74>
 80034e8:	4638      	mov	r0, r7
 80034ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034ec:	4621      	mov	r1, r4
 80034ee:	4628      	mov	r0, r5
 80034f0:	f000 f806 	bl	8003500 <__swsetup_r>
 80034f4:	2800      	cmp	r0, #0
 80034f6:	d0d5      	beq.n	80034a4 <__swbuf_r+0x20>
 80034f8:	f04f 37ff 	mov.w	r7, #4294967295
 80034fc:	e7f4      	b.n	80034e8 <__swbuf_r+0x64>
	...

08003500 <__swsetup_r>:
 8003500:	b538      	push	{r3, r4, r5, lr}
 8003502:	4b2a      	ldr	r3, [pc, #168]	; (80035ac <__swsetup_r+0xac>)
 8003504:	4605      	mov	r5, r0
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	460c      	mov	r4, r1
 800350a:	b118      	cbz	r0, 8003514 <__swsetup_r+0x14>
 800350c:	6a03      	ldr	r3, [r0, #32]
 800350e:	b90b      	cbnz	r3, 8003514 <__swsetup_r+0x14>
 8003510:	f7ff fa00 	bl	8002914 <__sinit>
 8003514:	89a3      	ldrh	r3, [r4, #12]
 8003516:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800351a:	0718      	lsls	r0, r3, #28
 800351c:	d422      	bmi.n	8003564 <__swsetup_r+0x64>
 800351e:	06d9      	lsls	r1, r3, #27
 8003520:	d407      	bmi.n	8003532 <__swsetup_r+0x32>
 8003522:	2309      	movs	r3, #9
 8003524:	602b      	str	r3, [r5, #0]
 8003526:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800352a:	f04f 30ff 	mov.w	r0, #4294967295
 800352e:	81a3      	strh	r3, [r4, #12]
 8003530:	e034      	b.n	800359c <__swsetup_r+0x9c>
 8003532:	0758      	lsls	r0, r3, #29
 8003534:	d512      	bpl.n	800355c <__swsetup_r+0x5c>
 8003536:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003538:	b141      	cbz	r1, 800354c <__swsetup_r+0x4c>
 800353a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800353e:	4299      	cmp	r1, r3
 8003540:	d002      	beq.n	8003548 <__swsetup_r+0x48>
 8003542:	4628      	mov	r0, r5
 8003544:	f7ff faf6 	bl	8002b34 <_free_r>
 8003548:	2300      	movs	r3, #0
 800354a:	6363      	str	r3, [r4, #52]	; 0x34
 800354c:	89a3      	ldrh	r3, [r4, #12]
 800354e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003552:	81a3      	strh	r3, [r4, #12]
 8003554:	2300      	movs	r3, #0
 8003556:	6063      	str	r3, [r4, #4]
 8003558:	6923      	ldr	r3, [r4, #16]
 800355a:	6023      	str	r3, [r4, #0]
 800355c:	89a3      	ldrh	r3, [r4, #12]
 800355e:	f043 0308 	orr.w	r3, r3, #8
 8003562:	81a3      	strh	r3, [r4, #12]
 8003564:	6923      	ldr	r3, [r4, #16]
 8003566:	b94b      	cbnz	r3, 800357c <__swsetup_r+0x7c>
 8003568:	89a3      	ldrh	r3, [r4, #12]
 800356a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800356e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003572:	d003      	beq.n	800357c <__swsetup_r+0x7c>
 8003574:	4621      	mov	r1, r4
 8003576:	4628      	mov	r0, r5
 8003578:	f000 f85d 	bl	8003636 <__smakebuf_r>
 800357c:	89a0      	ldrh	r0, [r4, #12]
 800357e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003582:	f010 0301 	ands.w	r3, r0, #1
 8003586:	d00a      	beq.n	800359e <__swsetup_r+0x9e>
 8003588:	2300      	movs	r3, #0
 800358a:	60a3      	str	r3, [r4, #8]
 800358c:	6963      	ldr	r3, [r4, #20]
 800358e:	425b      	negs	r3, r3
 8003590:	61a3      	str	r3, [r4, #24]
 8003592:	6923      	ldr	r3, [r4, #16]
 8003594:	b943      	cbnz	r3, 80035a8 <__swsetup_r+0xa8>
 8003596:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800359a:	d1c4      	bne.n	8003526 <__swsetup_r+0x26>
 800359c:	bd38      	pop	{r3, r4, r5, pc}
 800359e:	0781      	lsls	r1, r0, #30
 80035a0:	bf58      	it	pl
 80035a2:	6963      	ldrpl	r3, [r4, #20]
 80035a4:	60a3      	str	r3, [r4, #8]
 80035a6:	e7f4      	b.n	8003592 <__swsetup_r+0x92>
 80035a8:	2000      	movs	r0, #0
 80035aa:	e7f7      	b.n	800359c <__swsetup_r+0x9c>
 80035ac:	20000064 	.word	0x20000064

080035b0 <_sbrk_r>:
 80035b0:	b538      	push	{r3, r4, r5, lr}
 80035b2:	2300      	movs	r3, #0
 80035b4:	4d05      	ldr	r5, [pc, #20]	; (80035cc <_sbrk_r+0x1c>)
 80035b6:	4604      	mov	r4, r0
 80035b8:	4608      	mov	r0, r1
 80035ba:	602b      	str	r3, [r5, #0]
 80035bc:	f7fd f922 	bl	8000804 <_sbrk>
 80035c0:	1c43      	adds	r3, r0, #1
 80035c2:	d102      	bne.n	80035ca <_sbrk_r+0x1a>
 80035c4:	682b      	ldr	r3, [r5, #0]
 80035c6:	b103      	cbz	r3, 80035ca <_sbrk_r+0x1a>
 80035c8:	6023      	str	r3, [r4, #0]
 80035ca:	bd38      	pop	{r3, r4, r5, pc}
 80035cc:	20000290 	.word	0x20000290

080035d0 <memchr>:
 80035d0:	4603      	mov	r3, r0
 80035d2:	b510      	push	{r4, lr}
 80035d4:	b2c9      	uxtb	r1, r1
 80035d6:	4402      	add	r2, r0
 80035d8:	4293      	cmp	r3, r2
 80035da:	4618      	mov	r0, r3
 80035dc:	d101      	bne.n	80035e2 <memchr+0x12>
 80035de:	2000      	movs	r0, #0
 80035e0:	e003      	b.n	80035ea <memchr+0x1a>
 80035e2:	7804      	ldrb	r4, [r0, #0]
 80035e4:	3301      	adds	r3, #1
 80035e6:	428c      	cmp	r4, r1
 80035e8:	d1f6      	bne.n	80035d8 <memchr+0x8>
 80035ea:	bd10      	pop	{r4, pc}

080035ec <__swhatbuf_r>:
 80035ec:	b570      	push	{r4, r5, r6, lr}
 80035ee:	460c      	mov	r4, r1
 80035f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035f4:	4615      	mov	r5, r2
 80035f6:	2900      	cmp	r1, #0
 80035f8:	461e      	mov	r6, r3
 80035fa:	b096      	sub	sp, #88	; 0x58
 80035fc:	da0c      	bge.n	8003618 <__swhatbuf_r+0x2c>
 80035fe:	89a3      	ldrh	r3, [r4, #12]
 8003600:	2100      	movs	r1, #0
 8003602:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003606:	bf0c      	ite	eq
 8003608:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800360c:	2340      	movne	r3, #64	; 0x40
 800360e:	2000      	movs	r0, #0
 8003610:	6031      	str	r1, [r6, #0]
 8003612:	602b      	str	r3, [r5, #0]
 8003614:	b016      	add	sp, #88	; 0x58
 8003616:	bd70      	pop	{r4, r5, r6, pc}
 8003618:	466a      	mov	r2, sp
 800361a:	f000 f849 	bl	80036b0 <_fstat_r>
 800361e:	2800      	cmp	r0, #0
 8003620:	dbed      	blt.n	80035fe <__swhatbuf_r+0x12>
 8003622:	9901      	ldr	r1, [sp, #4]
 8003624:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003628:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800362c:	4259      	negs	r1, r3
 800362e:	4159      	adcs	r1, r3
 8003630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003634:	e7eb      	b.n	800360e <__swhatbuf_r+0x22>

08003636 <__smakebuf_r>:
 8003636:	898b      	ldrh	r3, [r1, #12]
 8003638:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800363a:	079d      	lsls	r5, r3, #30
 800363c:	4606      	mov	r6, r0
 800363e:	460c      	mov	r4, r1
 8003640:	d507      	bpl.n	8003652 <__smakebuf_r+0x1c>
 8003642:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003646:	6023      	str	r3, [r4, #0]
 8003648:	6123      	str	r3, [r4, #16]
 800364a:	2301      	movs	r3, #1
 800364c:	6163      	str	r3, [r4, #20]
 800364e:	b002      	add	sp, #8
 8003650:	bd70      	pop	{r4, r5, r6, pc}
 8003652:	466a      	mov	r2, sp
 8003654:	ab01      	add	r3, sp, #4
 8003656:	f7ff ffc9 	bl	80035ec <__swhatbuf_r>
 800365a:	9900      	ldr	r1, [sp, #0]
 800365c:	4605      	mov	r5, r0
 800365e:	4630      	mov	r0, r6
 8003660:	f7ff fad0 	bl	8002c04 <_malloc_r>
 8003664:	b948      	cbnz	r0, 800367a <__smakebuf_r+0x44>
 8003666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800366a:	059a      	lsls	r2, r3, #22
 800366c:	d4ef      	bmi.n	800364e <__smakebuf_r+0x18>
 800366e:	f023 0303 	bic.w	r3, r3, #3
 8003672:	f043 0302 	orr.w	r3, r3, #2
 8003676:	81a3      	strh	r3, [r4, #12]
 8003678:	e7e3      	b.n	8003642 <__smakebuf_r+0xc>
 800367a:	89a3      	ldrh	r3, [r4, #12]
 800367c:	6020      	str	r0, [r4, #0]
 800367e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003682:	81a3      	strh	r3, [r4, #12]
 8003684:	9b00      	ldr	r3, [sp, #0]
 8003686:	6120      	str	r0, [r4, #16]
 8003688:	6163      	str	r3, [r4, #20]
 800368a:	9b01      	ldr	r3, [sp, #4]
 800368c:	b15b      	cbz	r3, 80036a6 <__smakebuf_r+0x70>
 800368e:	4630      	mov	r0, r6
 8003690:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003694:	f000 f81e 	bl	80036d4 <_isatty_r>
 8003698:	b128      	cbz	r0, 80036a6 <__smakebuf_r+0x70>
 800369a:	89a3      	ldrh	r3, [r4, #12]
 800369c:	f023 0303 	bic.w	r3, r3, #3
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	81a3      	strh	r3, [r4, #12]
 80036a6:	89a3      	ldrh	r3, [r4, #12]
 80036a8:	431d      	orrs	r5, r3
 80036aa:	81a5      	strh	r5, [r4, #12]
 80036ac:	e7cf      	b.n	800364e <__smakebuf_r+0x18>
	...

080036b0 <_fstat_r>:
 80036b0:	b538      	push	{r3, r4, r5, lr}
 80036b2:	2300      	movs	r3, #0
 80036b4:	4d06      	ldr	r5, [pc, #24]	; (80036d0 <_fstat_r+0x20>)
 80036b6:	4604      	mov	r4, r0
 80036b8:	4608      	mov	r0, r1
 80036ba:	4611      	mov	r1, r2
 80036bc:	602b      	str	r3, [r5, #0]
 80036be:	f7fd f87b 	bl	80007b8 <_fstat>
 80036c2:	1c43      	adds	r3, r0, #1
 80036c4:	d102      	bne.n	80036cc <_fstat_r+0x1c>
 80036c6:	682b      	ldr	r3, [r5, #0]
 80036c8:	b103      	cbz	r3, 80036cc <_fstat_r+0x1c>
 80036ca:	6023      	str	r3, [r4, #0]
 80036cc:	bd38      	pop	{r3, r4, r5, pc}
 80036ce:	bf00      	nop
 80036d0:	20000290 	.word	0x20000290

080036d4 <_isatty_r>:
 80036d4:	b538      	push	{r3, r4, r5, lr}
 80036d6:	2300      	movs	r3, #0
 80036d8:	4d05      	ldr	r5, [pc, #20]	; (80036f0 <_isatty_r+0x1c>)
 80036da:	4604      	mov	r4, r0
 80036dc:	4608      	mov	r0, r1
 80036de:	602b      	str	r3, [r5, #0]
 80036e0:	f7fd f879 	bl	80007d6 <_isatty>
 80036e4:	1c43      	adds	r3, r0, #1
 80036e6:	d102      	bne.n	80036ee <_isatty_r+0x1a>
 80036e8:	682b      	ldr	r3, [r5, #0]
 80036ea:	b103      	cbz	r3, 80036ee <_isatty_r+0x1a>
 80036ec:	6023      	str	r3, [r4, #0]
 80036ee:	bd38      	pop	{r3, r4, r5, pc}
 80036f0:	20000290 	.word	0x20000290

080036f4 <_init>:
 80036f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f6:	bf00      	nop
 80036f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036fa:	bc08      	pop	{r3}
 80036fc:	469e      	mov	lr, r3
 80036fe:	4770      	bx	lr

08003700 <_fini>:
 8003700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003702:	bf00      	nop
 8003704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003706:	bc08      	pop	{r3}
 8003708:	469e      	mov	lr, r3
 800370a:	4770      	bx	lr
